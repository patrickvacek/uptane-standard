<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane IEEE-ISTO Standard for Design and Implementation</title>

    <author initials="J." surname="Cappos" fullname="Justin Cappos">
      <organization>NYU Tandon School of Engineering</organization>
      <address>
        <postal>
          <street>todo</street>
          <city>New York</city>
          <region>NY</region>
          <code>todo</code>
          <country>USA</country>
        </postal>
        <email>redacted@nyu.edu</email>
      </address>
    </author>

    <date year="2018" month="August" day="28"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing automotive software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for automobiles. This document describes procedures to enable programmers for OEMs and suppliers to design and implement this framework to better protect connected units on cars. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance Terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be  interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="automotive-terminology" title="Automotive Terminology">

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A car can have a number of buses that will vary in terms of power, speed and resources.<vspace />
<spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.<vspace />
<spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within an automobile. A primary ECU downloads from a repository and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a connection to the internet. Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.<vspace />
<spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves.<vspace />
<spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.<vspace />
<spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role Terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: Designating the responsibility of signing metadata about images to another party.<vspace />
<spanx style="emph">Roles</spanx>: The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Distributes and revokes public keys used to verify the root, timestamp, snapshot, and targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Holds the metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Indicates if there are any new metadata or image on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and Abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard.<vspace />
<spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on vehicle.<vspace />
<spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus.<vspace />
<spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air.<vspace />
<spanx style="emph">VIN</spanx>: Vehicle Identification Number.</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and Scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<section anchor="why-uptane-requires-standards" title="Why Uptane requires standards">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in cars is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on automotive ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards Coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in cars. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="use-cases" title="Use Cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>Bob, who works for an OEM, is overseeing the installation of Uptane on new vehicles at a manufacturing plant. He starts with preparing the ECUs by adding the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and the latest time, signed by the time server. His implementation would be considered Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>Alice, a Tier-1 supplier, completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM for whom Clark is in charge of electronic systems. Alice signs the image, then delivers it and all of its metadata, including delegations, and associated images to Clark. Clark adds these metadata and images to the image repository, along with information about any dependencies and conflicts between this image and those on other ECUs. Clark also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="dealership-updating-individual-ecus-on-demand" title="Dealership updating individual ECUs on demand">

<t>Dana runs a dealership for a major OEM. The OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. Individual owners are bringing in a revised image on a flash drive that was sent to them from the manufacturer via courier mail. To carry out this update, the OEM would first have to delegate to Dana the authority to sign the metadata that would need to accompany the image on the flashdrive. He would then follow the same procedures used by Clark in the example above.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>Frances needs to update an On-Board Diagnostics port and has several new images to download. To save bandwidth costs, she uses delta images that contain only the code and/or data that has changed from the previous image installed by the ECU. To do so, she must first modify the director repository using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. Frances then adds the following to the custom targets metadata used by the director repository: (1) the algorithm used to apply a delta image and (2) the targets metadata about the delta image. Frances would also check whether the delta images match the targets metadata from the director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:
* ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that prevent performance of public key cryptography; or they may lack sufficient storage to undo installation of bad software; or they simply may reside on a low-speed network (e.g., LIN)
* ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.
* A user may replace OEM-installed ECUs with aftermarket ECUs instead.
* A vehicle may be able to download only a limited amount of data via a cellular channel (due to limits on a data plan).
* A system may lack sufficient power to download or install software updates.
* Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).
* OEMs may be unwilling to implement costly security or hardware requirements.</t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies already (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>) exist to address this problem. Therefore, there is no need duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design Requirements">

<t>The design requirements for this document are governed by three principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to delineate best practices to ensure that, should a vehicle be attacked, an attacker is forced to compromise many different systems.</t>
  <t>to ensure that, if implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the manufacturing systems on which they run.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat Model and Attack Strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals that an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or develop (<xref target="capabilities"/>). We then describe and classify types of attack on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information or reverse-engineer firmware</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control the vehicle or ECUs within the vehicle</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Read and analyze the contents of previous and/or current versions of software, as well as the update sequence and instructions</t>
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control one or more ECUs within a vehicle</t>
  <t>Compromise signing or encryption keys</t>
  <t>Compromise and control software repository servers (and any keys stored on the repository)</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model considers the following types of attack, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read the unencrypted contents of an update sent from a repository to a vehicle.</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a previously known update to an ECU, even if a newer update exists.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install updates to some ECUs, but freeze updates on others.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behaviour may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously-valid software revision that is older than the currently-installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a set of images on ECUs in the vehicle that are incompatible with each other. This may be accomplished even if all of the individual images being installed are valid, as long as there exist valid versions that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="detailed-design-of-uptane" title="Detailed Design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation, and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An image repository containing binary images for install, and signed metadata about those images</t>
      <t>A director repository connected to an inventory database that can sign metadata on demand for images in the image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the repo. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A time server to deliver cryptographically verifiable time to ECUs</t>
  <t>An in-vehicle client on a primary ECU capable of verifying the signatures on all update metadata, handling all server communication, and downloading updates on behalf of secondary ECUs</t>
  <t>A client or library on each secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_syntax"/>.</t>

<section anchor="root_role" title="The Root role">

<t>The Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
The Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
The Root role SHALL sign the public keys used to verfy the metadata produced by the Timestamp, Snapshot, and Targets roles.
The Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>The Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role, and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search the any further if it does not find validly signed metadata about those images in the terminating delegation. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>The Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number and hash of the main Targets metadata and the version numbers and hashes of all delegated targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>The Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_syntax" title="Metadata abstract syntax">

<t>Metadata files on a repository SHOULD be written using the ASN.1 abstract syntax specified in this section.  These files MAY be encoded and decoded using any transfer syntax that an OEM desires (e.g., BER, CER, DER, JSON, OER, PER, XER).</t>

<section anchor="common_metadata" title="Common Metadata Structures and Formats">

<t>Metadata files SHOULD share the data structures in this section. These data structures specify how information, such as cryptographic hashes, digital signatures, and public keys, should be encoded.</t>

<t>This is an ABNF module that defines common data structures used by metadata files.</t>

<t>```
RoleType        = “root” / “targets” / “snapshot” / “timestamp”</t>

<t>; String types.
Filename        = 1<spanx style="emph">32VCHAR
; No known path separator allowed in a strict filename.
StrictFilename  = %x21-2E / %x30-5B / %x5D-7E
BitString       = 1</spanx>1024BIT
OctetString     = 1<spanx style="emph">1024OCTET
HexString       = 1</spanx>1024HEXDIG
; Table 1 of RFC 4648.
Base64String    = 1<spanx style="emph">1024(ALPHA / DIGIT / “+” / “=” / “/”)
; Adjust length to your needs.
Paths           = 1</spanx>8(Path)
Path            = 1<spanx style="emph">32((ALPHA / “_” / “</spanx>” / “"” / “/”))
; Adjust length to your needs.
URLs            = <spanx style="emph">8URL
URL             = 1</spanx>1024VCHAR
; A generic identifier for vehicles, primaries, secondaries.
Identifier      = 1*32VCHAR</t>

<t>Natural         = *DIGIT
Positive        = *(“1” / “2” / “3” / “4” / “5” / “6” / “7” / “8” / “9”)
Length          = Positive
Threshold       = Positive
Version         = Positive
; The date and time in UTC encoded as a UNIX timestamp.
UTCDateTime     = Positive</t>

<t>BinaryData      = BitString / OctetString / HexString / Base64String</t>

<t>; Adjust length to your needs.
Hashes          = 1*8Hash
Hash            = HashFunction  BinaryData</t>

<t>HashFunction    = “sha224” / “sha256” / “sha384” / “sha512” / “sha512-224” /
                               “sha512-256” / …</t>

<t>; Adjust length to your needs.
Keyids          = 1*8Keyid
; Usually, a hash of a public key.
Keyid           = HexString</t>

<t>; Adjust length to your needs.
Signatures      = 1*8Signature
Signature       = Keyid SignatureMethod Hash HexString
SignatureMethod = “rsassa-pss” / “ed25519” / …</t>

<t>; Adjust length of SEQUENCE OF to your needs.
PublicKeys      = 1*8PublicKey
PublicKey       = Keyid PublicKeyType BinaryData
PublicKeyType   = “rsa” / “ed25519” / …</t>

<t>```
An OEM MAY use any hash function (<spanx style="verb">Hash.function</spanx>; e.g., SHA-2) and signature scheme (<spanx style="verb">Signature.method</spanx>; e.g., <eref target="https://tools.ietf.org/html/rfc3447#page-29">RSASSA-PSS</eref>, <eref target="https://ed25519.cr.yp.to/">Ed25519</eref>).</t>

<t>A hash digest (<spanx style="verb">Hash.digest</spanx>), signature (<spanx style="verb">Signature.sig</spanx>), or public key (<spanx style="verb">PublicKey.keyval</spanx>) SHOULD be encoded as either a bit, octet, hexadecimal, or Base64 string. For example, an RSA public key MAY be encoded using the PEM format, whereas an Ed25519 public key MAY be encoded as a hexadecimal string.</t>

<t>Every public key has a unique identifier (<spanx style="verb">PublicKey.keyid</spanx>). This identifier MAY be, for example, the SHA-256 hash of the public key.</t>

<t>An ECU SHOULD verify that each <spanx style="verb">Keyids</spanx>, <spanx style="verb">Hashes</spanx>, <spanx style="verb">Signatures</spanx>, and <spanx style="verb">PublicKeys</spanx> sequence contains unique <spanx style="verb">KeyId</spanx>, <spanx style="verb">Hash.function</spanx>, <spanx style="verb">Signature.keyid</spanx>, and <spanx style="verb">PublicKey.keyid</spanx> values, respectively. The ECU MAY reject a sequence containing duplicate values, or simply ignore such values.</t>

<t>Every metadata file contains three parts: a signed message (<spanx style="verb">Signed</spanx>), the number of signatures on the following message (<spanx style="verb">Length</spanx>), and a sequence of signatures for the message (<spanx style="verb">Signatures</spanx>).</t>

<t>The signed message is a sequence of four attributes: (1) <spanx style="verb">RoleType</spanx>, an enumerated type of the metadata (i.e., root, targets, snapshot, or timestamp), (2) <spanx style="verb">UTCDateTime</spanx>, an expiration date and time for the metadata (specified using the ISO 8601 format), (3) <spanx style="verb">Positive</spanx>, a positive version number, and (4) <spanx style="verb">SignedBody</spanx>, the role-specific metadata. The version number SHOULD be incremented every time the metadata file is updated. The attributes of role-specific metadata will be discussed in the rest of this section.</t>

<t>Signatures SHOULD be computed over the hash of the signed message, instead of the signed message itself.</t>

<t>Below is an example of the metadata format common to all metadata. All metadata SHOULD follow this format.
<spanx style="verb">
Metadata      = Signed Length Signatures
Expires       = UTCDateTime
Version       = Positive
Signed        = RoleType Expires Version SignedBody
SignedBody    = RootMetadata / TargetsMetadata / SnapshotMetadata / TimestampMetadata
</spanx></t>

</section>
<section anchor="root_meta" title="Root Metadata">

<t>The root metadata distributes and revokes the public keys of the top-level root, targets, snapshot, and timestamp roles. These keys are revoked and replaced by changing the public keys specified in the root metadata. This metadata is signed using the root role’s private keys.</t>

<t>The root metadata contains two important attributes. First, the <spanx style="verb">keys</spanx> attribute lists the public keys used by the root, targets, snapshot, and timestamp roles. Second, the <spanx style="verb">roles</spanx> attribute maps each of the four roles to: (1) the URL pointing to its metadata file, (2) its public keys, and (3) the threshold number of keys required to sign the metadata file. An empty sequence of URLs denotes that the metadata file SHALL NOT be updated. An ECU SHOULD verify that each of the four roles has been defined exactly once in the metadata.</t>

<t>Here is the ABNF definition for the body of the root metadata.
```
; https://tools.ietf.org/html/rfc6025#section-2.4.2
NumberOfKeys  = Length
NumberOfRoles = Length
RootMetadata  = NumberOfKeys PublicKeys NumberOfRoles TopLevelRoles</t>

<t>; Adjust length to your needs.
TopLevelRoles = 4(TopLevelRole)
NumberOfURLs  = Length ; TAP 5: URLs pointing to the metadata file for this role.
NumberOfKeyIds = Length
TopLevelRole  = RoleType [NumberOfURLs] [URLs] NumberOfKeyIds Keyids Threshold
```</t>

</section>
<section anchor="targets_meta" title="Targets Metadata">

<t>At a minimum, a targets metadata file contains metadata (i.e., filename, hashes, length) about unencrypted images on a repository. The file MAY also contain two optional pieces of information: (1) custom metadata about which images should be installed by which ECUs, and whether encrypted images are available, and / or (2) other delegated targets roles that have been entrusted to sign images. This file is signed using the private keys of either the top-level targets role or a delegated targets role.</t>

<t>The following example specifies all of the REQUIRED as well as all of the RECOMMENDED attributes for the body of targets metadata.
```
Number of Targets  = Natural ; Allowed to have no targets at all.
TargetsMetadata    = NumberOfTargets Targets [TargetsDelegations] ; https://tools.ietf.org/html/rfc6025#section-2.4.2</t>

<t>; Adjust length to your needs.
Targets           = 1*128(TargetAndCustom)
TargetAndCustom   = Target [Custom]
NumberOfHashes    = Length
Target            = URL Filename Length NumberOfHashes Hashes</t>

<t>; The release counter is used to prevent rollback attacks on images when
; only the director repository is compromised.
; Every ECU should check that the release counter of its latest image is
; greater than or equal to the release counter of its previous image.
ReleaseCounter = Natural</t>

<t>; The hardware identifier is used to prevent the director repository,
; when it is compromised, from choosing images for an ECU that were not
; meant for it.
; Every ECU should check that the hardware ID of its latest image matches
; its hardware ID.
; An OEM MAY define other types of information to further restrict the
; choices that can be made by a compromised director repository.
HardwareIdnetifier = Identifier</t>

<t>; The ECU identifier specifies information, e.g., serial numbers, that the
; director uses to point ECUs as to which images they should install.
; Every ECU should check that the ECU ID of its latest image matches its
; own ECU ID.
EcuIdentifier = Identifier</t>

<t>; This attribute MAY be used by the director to encrypt images per ECU.
EncryptedTarget = Target</t>

<t>; This attribute is used to specify additional information, such as which
; images should be installed by which ECUs, and metadata about encrypted
; images.
; NOTE: The first 2 attributes are specified by both the image and
; director repositories.
; NOTE: The remaining attributes are specified only by the director
; repository.
Custom = [ReleaseCounter] [HardwareIdentifier] [EcuIdentifier] [EncryptedTarget] [EncryptedSymmetricKey]</t>

<t>; This is the symmetric key encrypted using the asymmetric ECU key.
EncryptedSymmetricKeyValue = BinaryData</t>

<t>; This attribute MAY be used if ECU keys are asymmetric, and a per-image
; symmetric encryption key is desired for faster decryption of images.
; In that case, the director would use the asymmetric ECU key to encrypt
; this symmetric key.
EncryptedSymmetricKey = EncryptedSymmetricKeyType EncryptedSymmetricKeyValue</t>

<t>EncryptedSymmetricKeyType = “aes128” / “aes192” / “aes256” / …</t>

<t>; The public keys of all delegatees.
NumberOfKeys = Length</t>

<t>; The role name, filename, public keys, and threshold of a delegatee.
NumberOfDelegations = Length</t>

<t>; A list of paths to roles, listed in order of priority.
Delegations = PrioritizedPathsToRoles</t>

<t>TargetsDelegations  = NumberOfKeys PublicKeys NumberOfDelegations Delegations</t>

<t>; Adjust length to your needs.
PrioritizedPathsToRoles = 1*8(PathsToRoles)</t>

<t>; A list of image/target paths entrusted to these roles.
NumberOfPaths = Length</t>

<t>; A list of roles required to sign the same metadata about the matching
; targets/images.
NumberOfRoles = Length</t>

<t>; Whether or not this delegation is terminating.
; BIT simulates a boolean value
Terminating = BIT</t>

<t>PathsToRoles = NumberOfPaths Paths NumberOfRoles MultiRoles Terminating</t>

<t>; Adjust length to your needs.
MultiRoles = 1*8(MultiRole)
MultiRole = Rolename NumberOfKeyids Keyids Threshold</t>

<t>; The rolename (e.g., “supplierA-dev”).
; No known path separator allowed in a rolename.
RoleName = StrictFilename</t>

<t>; The public keys used by this role.
NumberOfKeyids = Length
```</t>

<section anchor="metadata-about-images" title="Metadata about Images">

<t>At the very least, a targets metadata file MUST contain the <spanx style="verb">TargetsMetadata.targets</spanx> attribute, which specifies a sequence of unencrypted images. An empty sequence is used to indicate that no targets/images are available. For every unencrypted image, its filename, version number, length, and hashes are listed using the <spanx style="verb">Target</spanx> sequence. An ECU SHOULD verify that each unencrypted image has been defined exactly once in the metadata file.</t>

<t>The unencrypted image SHOULD also be associated with additional information using the <spanx style="verb">Custom</spanx> sequence. The following attributes SHOULD be specified by both the image and director repositories. The <spanx style="verb">Custom.releaseCounter</spanx> attribute is used to prevent rollback attacks when the director repository is compromised. The director repository cannot choose images for an ECU with a release counter that is lower than the release counter of the image it has currently installed. The <spanx style="verb">Custom.hardwareIdentifier</spanx> attribute is used to prevent a compromised director repository from causing ECUs to install images that were not intended for them. For example, this attribute MAY be the ECU part number. The OEM and its suppliers MAY define other attributes that can be used by ECUs to further restrict which types of images they are allowed to install.</t>

<t>The following attributes SHOULD be specified by the director repository. The <spanx style="verb">Custom.ecuIdentifier</spanx> attribute specifies the identifier (e.g., serial number) of the ECU that should install this image. An ECU SHOULD verify that each ECU identifier has been defined exactly once in the metadata file. If the director repository wishes to publish per-ECU encrypted images, then the <spanx style="verb">Custom.encryptedTarget</spanx> attribute MAY be used to specify metadata about the encrypted images. An ECU MUST then download the encrypted image, check its metadata, decrypt the image, and check its metadata again. Finally, if an ECU key is an asymmetric public key, the director repository MAY use a <spanx style="emph">symmetric</spanx> private key to reduce the time used to decrypt the image. To do so, the director repository MAY use the <spanx style="emph">asymmetric</spanx> ECU key to encrypt, e.g., a private AES symmetric key, and place the encrypted key in the <spanx style="verb">Custom.encryptedSymmetricKey</spanx> attribute.</t>

</section>
<section anchor="delegations_meta" title="Metadata about Delegations">

<t>Besides directly signing metadata about images, the targets role MAY delegate this responsibility to delegated targets roles. To do so, the targets role uses the OPTIONAL <spanx style="verb">TargetsMetadata.delegations</spanx> attribute. If this attribute is not used, then it means that there are no delegations.</t>

<t>The <spanx style="verb">TargetsDelegations.keys</spanx> attribute lists all of the public keys used by the delegated targets roles in the current targets metadata file. An ECU SHOULD verify that each public key (identified by its <spanx style="verb">Keyid</spanx>) has been defined exactly once in the metadata file.</t>

<t>The <spanx style="verb">TargetsDelegations.delegations</spanx> attribute lists all of the delegations in the current targets metadata file.  All delegations are prioritized: a sequence is used to list delegations in order of appearance, so that the earlier the appearance of a delegation, the higher its priority. Every delegation contains three important attributes.</t>

<t>The <spanx style="verb">PathsToRoles.paths</spanx> attribute describes a sequence of target/image paths that the delegated roles are trusted to provide. A desired target/image needs to match only one of these paths for the delegation to apply. A path MAY be either to a single file, or to a directory to indicate all files and / or subdirectories under that directory. A path to a directory is used to indicate all possible targets sharing that directory as a prefix; e.g. if the directory is “targets/A,” then targets which match that directory include “targets/A/B.img” and “targets/A/B/C.img.”</t>

<t>The <spanx style="verb">PathsToRoles.roles</spanx> attribute describes all of the roles that SHALL sign the same non-custom metadata (i.e., filename, length, and hashes of unencrypted images) about delegated targets/images. Every delegated targets role has (1) a name, (2) a set of public keys, and (3) a threshold of these keys required to verify its metadata file.</t>

<t>Note that a role name SHOULD follow the filename restrictions of the underlying file storage mechanism. For example, it may be “director” or “targets/director.” As discussed in Section 3.7, the role name will determine part of the actual metadata filename of the delegated targets role. If it is “director” or “targets/director,” then its delegated targets metadata file MAY use the filename “director.ext” or “targets/director.ext,” respectively. However, the role name SHALL NOT use the path separator (e.g., “/” or “\”) if it is a character used to separate directories on the underlying file storage mechanism. In other words, all targets metadata files are implicitly assumed to reside in the same directory. It is safe to use this character in key-value databases or stores that do not have a notion of directories (e.g., Amazon S3).</t>

<t>Finally, the <spanx style="verb">PathsToRoles.terminating</spanx> attribute determines whether or not a backtracking search for a target/image should be terminated.</t>

<t>The metadata file for a delegated targets role SHALL have exactly the same format as for the top-level targets role. For example, the metadata file for a supplier role has precisely the same format as the the top-level targets role.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot Metadata">

<t>The snapshot metadata lists the version numbers of all targets metadata files on the repository. It is signed using the snapshot role keys, and follows the format specified here.
<spanx style="verb">
; Adjust length to your needs.
SnapshotMetadata              = NumberOfSnapshotMetadataFiles SnapshotMetadataFiles
NumberOfSnapshotMetadataFiles = Length
SnapshotMetadataFiles         = 1*128SnapshotMetadataFile
SnapshotMetadataFile          = StrictFilename Version
; https://tools.ietf.org/html/rfc6025#section-2.4.2
</spanx>
The <spanx style="verb">filename</spanx> attribute specifies a metadata file’s relative path from the metadata root of a repository, and SHALL NOT contain a path separator.</t>

<t>An ECU SHOULD verify that each filename has been defined exactly once in the snapshot metadata file.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp Metadata">

</section>
<section anchor="map_file" title="The map file">

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from and written to at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all metadata files SHALL be written as such to a repository. If a metadata file A was specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT where VERSION is A’s version number <xref target="common_metadata"/>.</t>

<t>For example, if the top-level targets metadata file is referenced as “targets.json” in the snapshot metadata file, it is read and written using the filename “1.targets.json” instead. In a similar example, if the snapshot metadata file is referenced as “snapshot.json” in the timestamp metadata file, it is read and written using the filename “1.snapshot.json” instead. To take a final example using delegations (Section 3.4.2), if the ROLENAME of a delegated targets metadata file is “director,” and it is referred to in the snapshot metadata file using the filename “director.json” and the version number 42, then it is read and written using the filename “42.director.json” instead.</t>

<t>There are two exceptions to this rule. First, if the version number of the timestamp metadata is not known in advance, it MAY also be read from and written to a repository using a filename that is not qualified with a version number (i.e., FILENAME.EXT). As we will see in <xref target="director_repository"/>, this is the case with the timestamp metadata file on the image repository, but not the director repository. Second, the root metadata SHALL also be read from and written to a repository using a filename that is not qualified with a version number (i.e., FILENAME.EXT). This is because, as we will see in <xref target="metadata_verification"/>, the root metadata may be read without knowing its version number in advance.</t>

<t>All target files are written as such to a repository. If a target’s metadata file specifies a target file as FILENAME.EXT then it SHALL be written as HASH.FILENAME.EXT where HASH is one of the n hashes of the targets file <xref target="targets_meta"/>. This means that there SHALL be n different file names that all point to the same target file. Each filename is distinguished only by the value of the digest in its filename.</t>

<t>However, note that although a primary SHALL download a metadata or target file using the filename written to the repository, it SHALL write the file to its own storage using the original filename in the metadata. For example, if a metadata file is referred to as FILENAME.EXT in another metadata file, then a primary SHALL download it using either the filename FILENAME.EXT, VERSION.FILENAME.EXT, or HASH.FILENAME.EXT (depending on which of the aforementioned rules applies), but it SHALL always write it to its own storage as FILENAME.EXT. This implies that the previous set of metadata and target files downloaded from a repository SHALL be kept in a separate directory on an ECU from the latest set of files.</t>

<t>For example, the previous set of metadata and target files MAY be kept in the “previous” directory on an ECU, whereas the latest set of files MAY be kept in the “current” directory.</t>

</section>
<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<section anchor="version_report" title="ECU version report">
<t>The timestamp metadata specifies metadata (e.g., filename and version number) about the snapshot metadata file. It is signed using the timestamp role keys, and follows the format below.
<spanx style="verb">
; https://tools.ietf.org/html/rfc6025#section-2.4.2
TimestampMetadata = Filename Version Length NumberOfHashes Hashes
NumberOfHashes = Length
</spanx></t>

</section>
</section>
<section anchor="the-map-file" title="The map file">

<t>The map file specifies which images should be downloaded from which repositories. In most deployment scenarios for full verification ECUs, this will mean downloading images from both the image and director repositories. It is not signed, and follows the format specified here.
```
; https://github.com/theupdateframework/taps/blob/master/tap4.md
MapFile = NumberOfRepositories  Repositories NumberOfMappings Mappings</t>

<t>; A list of repositories
numberOfRepositories = Length</t>

<t>; A list of mapping of images to repositories.
NumberOfMappings = Length</t>

<t>; Adjust length to your needs.
Repositories    = 2Repository
; https://tools.ietf.org/html/rfc6025#section-2.4.2
Repository      = RepositoryName NumberOfServers Servers</t>

<t>; Adjust length to your needs.
RepositoryNames = 2RepositoryName
; A shorthand name for the repository, which also specifies the name of the
; directory on the client which contains previous and latest metadata.
RepositoryName  = StrictFilename</t>

<t>; A list of servers where metadata and targets may be downloaded from.
NumberOfServers = Length
Servers         = URLs</t>

<t>; Adjust length to your needs.
Mappings = Mapping
; https://tools.ietf.org/html/rfc6025#section-2.4.2
Mapping  = NumberOfPaths Paths NumberOfRepositories RepositoryNames Terminating</t>

<t>; The list of targets delegated to the following repositories.
NumberOfPaths = Length</t>

<t>; The repositories which MUST all sign the preceeding targets.
NumberOfRepositories = Length</t>

<t>; Whether or not this delegation is terminating.
; Simulate a BOOLEAN
Terminating = BIT</t>

<t>END
```
The <spanx style="verb">MapFile.repositories</spanx> attribute specifies a list of available repositories. For each repository, a short-hand name, and a list of servers where metadata and targets may be downloaded from, are specified. The short-hand name also specifies the metadata directory on an ECU containing the previous and current sets of metadata files.</t>

<t>The <spanx style="verb">MapFile.mappings</spanx> attribute specifies which images are mapped to which repositories. An OEM MAY map the same set of images to multiple repositories. Typically, an OEM would map all images to both the image and director repositories. See the deployment considerations document for other configurations, especially with regard to fleet management.</t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
  <t>Time server</t>
</list></t>

<section anchor="image-repository" title="Image Repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations for the image as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director Repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Directory repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require it, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>When the Director receives a vehicle version manifest sent by a primary (as described in <xref target="construct_manifest_primary"/>), it decodes the manifest, and determines the unique vehicle identifier.</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director checks the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director drops the request. An implementor MAY make whatever additional checks they wish. At a minimum, the following checks are required:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the primary that sent it.</t>
      <t>The signature of each secondary’s contribution to the manifest matches the ECU key of that secondary.</t>
    </list></t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, it MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images, and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed in the vehicle, based on the dependency resolution in step 4. This includes targets (<xref target="targets_meta"/>), snapshot (<xref target="snapshot_meta"/>), and timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>A public key</t>
      <t>The format of the public key</t>
      <t>Whether the ECU is a primary or a secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles.</t>

</section>
</section>
<section anchor="time_server" title="Time Server">

<t>The Time Server exists to inform vehicles about the current time in cryptographically secure way, since many ECUs in a vehicle will not have a reliable source of time. It receives lists of tokens from vehicles, and returns back a signed sequence that includes the token and the current time.</t>

<t>The Time Server SHALL receive a sequence of tokens from a vehicle representing all of its ECUs. In response, it SHALL sign each token together with the current time.</t>

<t>The Time Server SHALL expose a public interface allowing primaries to communicate with it. This communication MAY occur over FTP, FTPS, SFTP, HTTP, or HTTPS.</t>

</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify the time, metadata, and image binaries before installing a new image.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a primary or a secondary ECU. A primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) containing information about which images have been installed on ECUs in the vehicle. It also downloads and verifies the latest time, metadata, and images for itself and for its secondaries. A secondary ECU downloads and verifies the latest time, metadata, and images for itself from its associated primary ECU. It also sends signed information about its installed images to its associated primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A primary ECU MUST perform full verification (<xref target="full_verification"/>). A secondary ECU SHOULD perform full verification if possible, and MUST perform full verification if it is safety-critical. If it is not safety-critical, it MAY perform partial verification (<xref target="partial_verification"/>) instead.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>The latest copy of required Uptane metadata at the time of manufacture or install.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the root and targets metadata from the director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata from both repositories (root, targets, snapshot, and timestamp), as well as the repository map file <xref target="TAP-4"/>.</t>
    </list></t>
  <t>The public key(s) of the time server.</t>
  <t>An attestation of time downloaded from the time server.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="downloading-and-distributing-updates-on-a-primary-ecu" title="Downloading and distributing updates on a primary ECU">

<t>A primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once it has the complete manifest built, it MAY send the manifest to the director repository. However, it is not strictly required that the primary send the manifest until step three.</t>

<t>Secondaries MAY send their version report at any time, so that it is stored on the primary already when it wishes to check for updates. Alternatively, the primary MAY request a version report from each secondary at the time of the update check.</t>

</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The primary SHALL download the current time from the time server, for distribution to its secondaries.</t>

<t>The version report from each secondary ECU (as described in <xref target="version_report"/>) contains a nonce, plus a signed ECU version report. The primary SHALL gather each of these nonces from the secondary ECUs, then send them to the time server to fetch the current time. The time server responds as described in <xref target="time_server"/>, providing a cryptographic attestation of the last known time. The primary SHALL verify that the signatures are valid, and that the time the server attests is greater than the previous attested time.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The primary SHALL download and verify images for itself and for all of its associated secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the director’s targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="targets_meta"/>. The primary SHALL associate each image binary with each of its possible filenames.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to secondaries">

<t>The primary SHALL send the time server’s latest attested time to each ECU. The secondary SHALL verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to secondaries">

<t>The primary SHALL send the latest metadata it has downloaded to all of its associated secondaries.</t>

<t>Full verification secondaries SHALL keep a complete copy of all metadata. A partial verification secondary MAY keep <spanx style="emph">only</spanx> the targets metadata file from the director repository.</t>

</section>
<section anchor="send_images_primary" title="Send images to secondaries">

<t>The primary SHALL send the latest image to each of its associated secondaries that have storage to receive it.</t>

<t>For secondaries without storage, the primary SHOULD wait for a request from the secondary to stream the new image file to it. The secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-ecus" title="Installing images on ECUs">

<t>Before installing a new image, an ECU SHALL perform the following five steps:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Verify latest attested time">

<t>The ECU SHALL verify the latest downloaded time. To do so, it must:</t>

<t><list style="numbers">
  <t>Verify that the signatures on the downloaded time are valid,</t>
  <t>Verify that the list of nonces/tokens in the downloaded time includes the token that the ECU sent in its previous version report</t>
  <t>Verify that the time downloaded is greater than the previous time</t>
</list></t>

<t>If all three steps complete without error, the ECU SHALL overwrite its current attested time with the time it has just downloaded and generate a new nonce/token for the next request to the time server.</t>

<t>If any check fails, the ECU SHALL NOT overwrite its current attested time, and SHALL jump to the fifth step (<xref target="create_version_report"/>). The ECU MUST reuse its previous token for the next request to the time server.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, it SHALL download the latest image from the primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the targets metadata file from the director repository.</t>
  <t>Find the targets metadata associated with this ECU identifier.</t>
  <t>Construct the image filename using the rule in <xref target="metadata_filename_rules"/>.</t>
</list></t>

<t>When the primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest targets metadata file from the director.</t>
  <t>Find the target metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the target metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage, before it is installed.</t>

<t>If any step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>). If the ECU does not have secondary storage, a step fails, and the ECU created a backup of its previous working image, the ECU SHOULD now install the backup image.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the primary (or simply save it to disk, if the ECU is a primary). The primary SHOULD write the version reports it receives to disk and associate them with the secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification">

<t>A primary ECU MUST perform full verification of metadata. A secondary ECU SHOULD perform full verification of metadata, but MAY perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load the latest attested time from the time server.</t>
  <t>Load the latest top-level targets metadata file from the director repository.</t>
  <t>Check that the metadata file has been signed by a threshold of keys specified in the previous root metadata file. If not, return an error code indicating an arbitrary software attack.</t>
  <t>Check that the version number in the previous targets metadata file, if any, is less than or equal to the version number in this targets metadata file. If not, return an error code indicating a rollback attack.</t>
  <t>Check that the latest attested time is lower than the expiration timestamp in this metadata file. If not, return an error code indicating a freeze attack.</t>
  <t>Check that there are no delegations. If there are, return an error code.</t>
  <t>Check that each ECU identifier appears only once. If not, return an error code.</t>
  <t>Return an indicator of success.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the targets metadata about images from the director repository matches the targets metadata about the same images from the image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed either by primary or secondary ECUs. The procedure is the same, except that secondary ECUs receive their metadata from the primary instead of downloading it directly. In the following instructions, whenever an ECU is directed to download metadata, it applies only to primary ECUs.</t>

<t>A primary ECU SHALL download metadata and images following the rules specified in <xref target="TAP-5"/>, and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load the map file <xref target="TAP-4"/>. If necessary, use the information therein to determine where to download metadata from.</t>
  <t>Load the latest attested time from the time server.</t>
  <t>Download and check the root metadata file from the director repository:
  <list style="numbers">
      <t>Load the previous root metadata file.</t>
      <t>Update to the latest root metadata file.</t>
      <t>Let N denote the version number of the latest root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, then go to step 3.5.</t>
      <t>Version N+1 of the root metadata file MUST have been signed by: (1) a threshold of keys specified in the latest root metadata file (version N), and (2) a threshold of keys specified in the new root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at step 0 and version N of the root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest root metadata file (version N) must be less than or equal to the version number of the new root metadata file (version N+1). Effectively, this means checking that the version number signed in the new root metadata file is indeed N+1. If the version of the new root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 0 and version N of the root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest root metadata file to the new root metadata file.</t>
      <t>Repeat steps 1 to 6.</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in the latest root metadata file. (Checks for a freeze attack.)</t>
      <t>If the the timestamp and / or snapshot keys have been rotated, delete the previous timestamp and snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
    </list></t>
  <t>Download and check the timestamp metadata file from the director repository:
  <list style="numbers">
      <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
      <t>Check that it has been signed by the threshold of keys specified in the latest root metadata file. If the new timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
      <t>Check that the version number of the previous timestamp metadata file, if any, is less than or equal to the version number of this timestamp metadata file. If the new timestamp metadata file is older than the trusted timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in this timestamp metadata file. If the new timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
    </list></t>
  <t>Download and check the snapshot metadata file from the director repository:
  <list style="numbers">
      <t>Download up to the number of bytes specified in the timestamp metadata file. If consistent snapshots are not used <xref target="metadata_filename_rules"/>, then the filename used to download the snapshot metadata file is of the fixed form FILENAME.EXT (e.g., snapshot.json). Otherwise, the filename is of the form VERSION_NUMBER.FILENAME.EXT (e.g., 42.snapshot.json), where VERSION_NUMBER is the version number of the snapshot metadata file listed in the timestamp metadata file. In either case, the ECU MUST write the file to non-volatile storage as FILENAME.EXT.</t>
      <t>The hashes and version number of the new snapshot metadata file MUST match the hashes and version number listed in timestamp metadata. If hashes and version do not match, discard the new snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
      <t>Check that it has been signed by the threshold of keys specified in the latest root metadata file. If the new snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
      <t>Check that the version number of the previous snapshot metadata file, if any, is less than or equal to the version number of this snapshot metadata file. If this snapshot metadata file is older than the previous snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
      <t>Check that the version number the previous snapshot metadata file lists for each targets metadata file is less than or equal to the its version number in this snapshot metadata file. If this condition is not met, discard the new snaphot metadadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
      <t>Check that each targets metadata filename listed in the previous snapshot metadata file is also listed in this snapshot metadata file. If this condition is not met, discard the new snaphot metadadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in this snapshot metadata file. If the new snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
    </list></t>
  <t>Download and check the targets metadata file from the director repository:
  <list style="numbers">
      <t>Download up to either the number of bytes specified in the snapshot metadata file, or some Z number of bytes. The value for Z is set by the implementor. For example, Z may be tens of kilobytes. If consistent snapshots are not used <xref target="metadata_filename_rules"/>, then the filename used to download the targets metadata file is of the fixed form FILENAME.EXT (e.g., targets.json). Otherwise, the filename is of the form VERSION_NUMBER.FILENAME.EXT (e.g., 42.targets.json), where VERSION_NUMBER is the version number of the targets metadata file listed in the snapshot metadata file. In either case, the ECU MUST write the file to non-volatile storage as FILENAME.EXT.</t>
      <t>The hashes (if any), and version number of the new targets metadata file MUST match the latest snapshot metadata. If the new targets metadata file does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
      <t>Check that it has been signed by the threshold of keys specified in the latest root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>Check that the version number of the previous targets metadata file, if any, is less than or equal to the version number of this targets metadata file. (Checks for a rollback attack.)</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in this targets metadata file. (Checks for a freeze attack.)</t>
      <t>Check that there are no delegations. (Targets metadata from the director MUST NOT contain delegations.)</t>
      <t>Check that no ECU identifier is represented more than once.</t>
    </list></t>
  <t>Download and check the root metadata file from the image repository as in Step 3.</t>
  <t>Download and check the timestamp metadata file from the image repository as in Step 4.</t>
  <t>Download and check the snapshot metadata file from the image repository as in Step 5.</t>
  <t>Download and check the top-level targets metadata file from the image repository as in Step 6 (except for Steps 6.6-6.7).</t>
  <t>For each image listed in the targets metadata file from the director repository, locate a targets metadata file that contains an image with exactly the same file name. For each delegated targets metadata file that is found to contain metadata for the image currently being processed, perform all of the checks in step 10. Use the following process to locate image metadata:
  <list style="numbers">
      <t>If the top-level targets metadata file contains signed metadata about the image, return the metadata to be checked and skip to step 11.3.</t>
      <t>Recursively search the list of delegations, in order of appearance:
      <list style="numbers">
          <t>If it is a multi-role delegation <xref target="TAP-3"/>, recursively visit each role, and check that each has signed exactly the same non-custom metadata (i.e., length and hashes) about the image. If it is all the same, return the metadata to be checked and skip to step 11.3.</t>
          <t>If it is a terminating delegation and it contains signed metadata about the image, return the metadata to be checked and skip to step 11.3. If metadata about an image is not found in a terminating delegation, return an error code indicating that the image is missing.</t>
          <t>Otherwise, continue processing the next delegation, if any. As soon as a delegation is found that contains signed metadata about the image, return the metadata to be checked and skip to step 11.3.</t>
          <t>If no signed metadata about the image can be found anywhere in the delegation graph, return an error code indicating that the image is missing.</t>
        </list></t>
      <t>Check that the targets metadata from the image repository matches the targets metadata from the director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted image are the same in both sets of metadata.</t>
          <t>Check that the custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous targets metadata file is less than or equal to the release counter in this targets metadata file.</t>
        </list></t>
    </list></t>
  <t>Verify the desired image against its targets metadata.</t>
  <t>If there is no targets metadata about this image, abort the update cycle and report that there is no such image.</t>
  <t>Otherwise, download the image (up to the number of bytes specified in the targets metadata), and verify that its hashes match the targets metadata. (We download up to this number of bytes, because in some cases, the exact number is unknown. This may happen, for example, if an external program is used to compute the root hash of a tree of targets files, and this program does not provide the total size of all of these files.) If consistent snapshots are not used <xref target="metadata_filename_rules"/>, then the filename used to download the image file is of the fixed form FILENAME.EXT (e.g., foobar.tar.gz). Otherwise, the filename is of the form HASH.FILENAME.EXT (e.g., c14aeb4ac9f4a8fc0d83d12482b9197452f6adf3eb710e3b1e2b79e8d14cb681.foobar.tar.gz), where HASH is one of the hashes of the targets file listed in the targets metadata file found earlier in step 4. In either case, the client MUST write the file to non-volatile storage as FILENAME.EXT.</t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the primary ECU, it SHOULD also ensure that the ECU identifiers present in the targets metadata from the director repository are a subset of the actual ECU identifiers of ECUs in the vehicle.</t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC2616" target='https://www.rfc-editor.org/info/rfc2616'>
<front>
<title>Hypertext Transfer Protocol -- HTTP/1.1</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='J.' surname='Gettys' fullname='J. Gettys'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<author initials='H.' surname='Frystyk' fullname='H. Frystyk'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<date year='1999' month='June' />
<abstract><t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as &quot;HTTP/1.1&quot;, and is an update to RFC 2068.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2616'/>
<seriesInfo name='DOI' value='10.17487/RFC2616'/>
</reference>



<reference  anchor="RFC3280" target='https://www.rfc-editor.org/info/rfc3280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='D.' surname='Solo' fullname='D. Solo'><organization /></author>
<date year='2002' month='April' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 Certificate Revocation List (CRL) for use in the Internet.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3280'/>
<seriesInfo name='DOI' value='10.17487/RFC3280'/>
</reference>



<reference  anchor="RFC3447" target='https://www.rfc-editor.org/info/rfc3447'>
<front>
<title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
<author initials='J.' surname='Jonsson' fullname='J. Jonsson'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2003' month='February' />
<abstract><t>This memo represents a republication of PKCS #1 v2.1 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document is taken directly from the PKCS #1 v2.1 document, with certain corrections made during the publication process.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='3447'/>
<seriesInfo name='DOI' value='10.17487/RFC3447'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC4634" target='https://www.rfc-editor.org/info/rfc4634'>
<front>
<title>US Secure Hash Algorithms (SHA and HMAC-SHA)</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2006' month='July' />
<abstract><t>The United States of America has adopted a suite of Secure Hash Algorithms (SHAs), including four beyond SHA-1, as part of a Federal Information Processing Standard (FIPS), specifically SHA-224 (RFC 3874), SHA-256, SHA-384, and SHA-512.  The purpose of this document is to make source code performing these hash functions conveniently available to the Internet community.  The sample code supports input strings of arbitrary bit length.  SHA-1's sample code from RFC 3174 has also been updated to handle input strings of arbitrary bit length.  Most of the text herein was adapted by the authors from FIPS 180-2.</t><t>Code to perform SHA-based HMACs, with arbitrary bit length text, is also included.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='4634'/>
<seriesInfo name='DOI' value='10.17487/RFC4634'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC5756" target='https://www.rfc-editor.org/info/rfc5756'>
<front>
<title>Updates for RSAES-OAEP and RSASSA-PSS Algorithm Parameters</title>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='K.' surname='Yiu' fullname='K. Yiu'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='T.' surname='Polk' fullname='T. Polk'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document updates RFC 4055.  It updates the conventions for using the RSA Encryption Scheme - Optimal Asymmetric Encryption Padding (RSAES-OAEP) key transport algorithm in the Internet X.509 Public Key Infrastructure (PKI).  Specifically, it updates the conventions for algorithm parameters in an X.509 certificate's subjectPublicKeyInfo field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5756'/>
<seriesInfo name='DOI' value='10.17487/RFC5756'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>


<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/commit/d0818e580c322815a473520f2e8cc5f5eb8df499">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/commit/2cb67d913ec19424d1e354b38f862886fbfd4105">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC1321" target='https://www.rfc-editor.org/info/rfc1321'>
<front>
<title>The MD5 Message-Digest Algorithm</title>
<author initials='R.' surname='Rivest' fullname='R. Rivest'><organization /></author>
<date year='1992' month='April' />
<abstract><t>This document describes the MD5 message-digest algorithm. The algorithm takes as input a message of arbitrary length and produces as output a 128-bit &quot;fingerprint&quot; or &quot;message digest&quot; of the input.  This memo provides information for the Internet community.  It does not specify an Internet standard.</t></abstract>
</front>
<seriesInfo name='RFC' value='1321'/>
<seriesInfo name='DOI' value='10.17487/RFC1321'/>
</reference>


<reference anchor="ED25519" >
  <front>
    <title>"High-Speed High-Security Signatures", Journal of Cryptographic Engineering, Vol. 2</title>
    <author initials="D.J." surname="Bernstein">
      <organization></organization>
    </author>
    <author initials="N." surname="Duif">
      <organization></organization>
    </author>
    <author initials="T." surname="Lange">
      <organization></organization>
    </author>
    <author initials="P." surname="Schwabe">
      <organization></organization>
    </author>
    <author initials="B-Y." surname="Yang">
      <organization></organization>
    </author>
    <date year="2011" month="September" day="26"/>
  </front>
</reference>
<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
H4sIAEkt5FsAA9W923LbWJYg+s6vQNgxkZaHpO6y7IyMObIkt9Vlyx5Jzqrs
mgobJEAJZRJgA6BkpiMj+jdOxJyf6y+Zdd17bQCkZGdWzel6yJJBYF/WXnvd
L4PBoFdn9TR9EX2Y13GeRmenp6eDs8urd9El/DuJyySaFGV0klbZdR7Bk+hs
Np+mszSv4zor8l48GpXpLXz//uro/LSXFOM8nsF4CxpvUMkog4RG6CVxDT/u
bG0fDrYOBzuHvTE8uC7K5YsoyydFr5fNyxdRXpykZXYLM9ym1VW5qOqdra3n
Wzu9uEzjF9HVu5N3vbui/HxdFou5/PtzuoRHyYvoLK/TMk/rwUkZT+pej5bw
MZ4WOcy8TKvePHsR/bUuxv2oKsq6TCcV/LWc4R9/6/XiRX1TlC96UTSAJVUv
on8dRsfxfF5U8CiKeHf/CkvKcvu8KK/jPPuVgPIiOv/lQ3QF0xZ5dDm+KYpp
VEyi0/w6y1PYWH5Nn6SzOJu+iMo0icd1mvw/+XIxTJMF/VbButL6RVQXSUEP
xsUirxFMHy6P6EGZXstU/HtWw4/n6V30CwBGPklSGaGXF+WMwIkbexz9iYEV
JekkevL2w+VVP7p8ffTmTT96e/RLP0rr8XADXrx4dbyzvf2cv3l9dfV+c3u4
Lc8Ptg/4+V+G+1vP+eHuzuEWP3z/p+PLFxe0VHy+t/fMvAy/nkXVPB3Lrwf6
K6yBH+0d7O7xo1FcpQd7+nTvkJ/CyIBhiEwV/7T/bF+W86+X78752bPtfVn6
1dH7aDeKawDabZRsHW4fpvvwAzwe7L4gWNVxeY3wvqnrefVic/M6q28Wo+G4
mG3WNylPNSnh7BHtNut4Xm3Cb7Os3pThDrfGuzs7h9v78d6z3f2drclOejge
70/209FhMtl7/pyn4ct2dZPChcMxo1c6qCxyEL1dTOtsUBbTFI5nml4TSjGS
edzE/wl+Xg3/NIz+tJjPF1U8W4a/XQ6jo7u7OAmfngJGw+mn02n4/OdhdJLF
v4YPAf3fFtVNmn8uWj8Y/LcXe3uwfejgvqdw3xmPDp4lzwXue78X7jLc9m46
3n6+t7OXbKe7+3uj3cPJ4cHO4eHBZDRJ9ra39h8E9z2FO9A2WCxsKquBKMEV
yqs0rxZVBDcZaB6SojSRVf/XOZNng+2dwfa+O5N9PRP4aecg2ZEz2f/uMxlN
i9GmDLa1O34+ej7e2nme7BxMDg62d7YOno/T3e3Drf2treR5jJ/sD2fJ46S4
y6dFnABBHMzSOoaB4wFQzQGvYDDJpmn1oPPbBwBcpjXQ5Ovow8WbipgWXqEK
4BLBquEfRR3pJBGO/F/m9OhG7ezw6X145e7TaC/dPkTSCA8HSE6/5/jwu2yS
jYnK8DnKwM92JunOfrI/2n822YWDnMT7W9tbe88Pno0PJ3EawzkuJjQvnOW9
p3Rp51kNegDBZTxbpA04ngPIYlj9XSUfu1/+BSGfJ2X8AMB/+7nC06tilMVV
a5V/LrPrmzp8/BpWmd7kaVm3sOOqXP6aTuO4XHfi7vEFrj6/nqZwNdIWMjwf
bD8HQQnEpYCnvz3ZZ763vbuzjY9OT3b295l7u7P54dFrWPcATgPIGP+Zjhcl
CA/RJchncb0o0+pRP/rXYlHmMYktx+VyXhfXZTy/ycZWiOlHPxfTYbTzw+rj
PBniFl+CPAZ0M8tbh3qyyCbNM4rexPl1Gj59P0Q56i4eNZ6/HPwyjH6JRaBy
QNpGIO0cwMO3pxfHHy5+6b4Zd3d3wwXQ9+zLEMS3zWoJi5xtEtUBLpNP0jLN
x+lmXI+3n/F/B58Ve4bzZGIB++htWgIgQQZ7CRTsLkvqm8HpZJKO8YCi93Bh
gX0A6iNEL4rpdBSPP0dHdQ3/V0VH1zFspwZMns0WOR7GhfKgDI7j+yjVKtpj
EK5KcXzEJB337PLl+Yvo+bPDwfbg+e7282fbg93DwUGTnWwhR4GH70+Bk+8f
rgbvfAmrzgm8SXq7OU+BWcB/Blvw1WYAPxgqgofRACj5orzNbpGWxwiSeVnM
sipFyL1fvj/7I8EB+HkJVGxSr4OS2/cuodUzJsSgc0RxkhDxPT6+HMDvW+Ev
J2fv37x7e3Q1OL88OcPfDxq/n17AA5Dn4cnRWhSNQYiPl0TCK5RLNut0fAMo
Ol3M8qwCWQjG3tw62Nw53FzCxR3Et2kZX6eDcVwOpkU9mBUl/APUgUECalWa
D+qbOB/Aq/BHln/ePDzY2322tb8TnMgvMFIkI0UwUpRVcB5TZKMwXGSGi3C4
CIaLaLjV5/NyGL374aTIc2WUDrQHg60DVAej6Phi8O7qaDU0UCRbzNISpbSy
rgi1YLJiVuBNGyBk8mJaXC/5afw5LatBOhuV8TgdFLAd2HM6iLNyIAoEQCkf
3MGXKNwNkgz4ZTwl0MEU8F4AlCM3ZnTKY0bvdMyjrBS+BwrlaAHXGaDy5zQi
BRaQjwaGhyXebhj4f6wGFKDxy7gsly3avwd4BA/PzgdX767edUMpg/Mt6mIo
jD8rwosmP8NeIicGgJYIxADoV0rCUgYq9DUxBbhzVTGp70Dxjiq4WFOQiW+Q
WD1qLm17a7ADbKk3gAscj0B/BaW217u6AaxJivECLQagz1TjMhuliEh+bpTV
aHK68e4o/cR8UBHT52rIc8yyJAEhrtd7jBp/WSSLMYkWPbFkELbKnpojhXPz
lCMk+8CoVywYiNAYlHPgjgirNI9HoCnAQ+CLsxmiA4707vRtRUYSAlWGj+Hl
xBtPMjWe4E2pQviPQH5NSxwTcLhG1SNP0S4QIUcgBQRwElZ4RocTs6zLe43h
50U9BcacqLxbpQSOCu9mDYubTos7GCBHc8NizMccw57lkGPiRLLgsae5sPsa
hLapA350VkfxtCpgzoqgAScZV7hw3F8aV7BrmGOMN23JUKuqqLopFtME3jVD
F2M4myGiSFohygHKLGTNLJQuaZH4RZEDyKoI4AGDxTAuHRv9NM1igGYWGKUQ
RgkwkGQBC3c/FbA5BABeXxwZbivoH5EjGLTN8U2RwSTRXYakDF4rKlQI/32R
lTSIYshkmn7JBHw4YOWOIonhD0QOACSufxbncGeAAsCuf8XTFGQG4s2bBQkk
iUY4TL6YwKUBqJaI5MAp0nKWMTGDfz5GQZdkPhBKwt9Q4hb7VxWxOQf/G52/
g78uTv/nh7OL0xNn4qH/498uX7/78OZE/1/fP3739u3p+Ql+QuYgPNl376/O
3p0fvWH8sncE7xWhb0R0o5yXKWIt4KTeHkLKr1/FmvTbb7C5MxCEQF8q5Usk
6hn8E179z//43wzKgTve/n/+x/8Hi2icMm9RMDuekqxaEy6VC1T8YsWjzN8K
XfSQ4HnkaU0AzqcvF9VToI85bwjl4DFLZqy+ICbWfG3xctFLcl0ri6+CRHF0
m4LoPE1BxSBGilh4A5wVfskXsxFAAZY+AjyQ23qXwW5uEc9x2bCyCl+YF3dp
2cc9IXThSOD2AYseI9WKek/PZsCnYdWvgI4hPGug0kgiHO2jO5NHp8cfEOh4
3wBoqFct9XVYzyjLaV4cDF+bTOPqpq9vM9ztVWXkKAC2pbmeTjeBt3FaBL3M
C7d/npbARmJiJvgL34hhdBqPb/i15RwvI/x8U0wTJH3wZ4E0HZcFU07hXi6u
bxgRZ7ABBVZVzFBWqQQm70v4AsQl0HEKNEMvcXg82isCKt08JtCEp0JvkJtM
herqEeaGS+AxznlkWq6aMZCeFzMAojEgIXSAEiISVnr1aRfMJ7xBAqAE86XT
CT0XlmgWzYBOQNqDlS5qNGx0DMNsnD7LmJst4MusVhJWRekX4MwRSpF4wtUc
JRgcIlaGg2cmpCsTSzoIycFakL6neGuYiq7bFgIEhxJ4CbrgeeYpA5+gw4AS
LDPE2Q3EzBMnoIN16tES7ynqMTCMxXr/4Qg4o/sUkZ24l2I8bZMXDn/O4ABu
ZYpLZeFP0aWQpPMU/pPXdL/jPGM54A7u9Q2hRki+CSlhYr6gAgEVUcgXAGCE
44HxB9tGWkjgjMY1QId2pPzDsAX+ZMd8QuSX2BTRDrhcePf85EnkBJ3mdLTP
n5k2RT/DA6KqsLlJWtUEWNxsJtcepQQ4HMT4W3l3Ju+SdGLIHMgItAEiwjG8
RgLCFJBXRxGYgwQAOjZuuFzkdHA4EM/iTHdu2IiotjDaCzSQN7kgQoGuNkIl
SScqEV2XaYxLSAAtsimzIzIPEjN6euLt7LBtdnaxgEWmw7SaI3/y0hL+vhLL
EC/inEniPC7rJWMszvaUjWNsmJyB4AHwq2Y4okoPyMwqFuBI4CLy5C69mzhY
EuJiVfDxq8TkVWakmyAbAJWC12BZjkxnU6TzQABqFRgXKvLjv9FcUeoyEEgR
7AE+x40gkAwlYmZ0W6AYNF+MptkYZ/T0Va64mmH7oIrMAGvi2RzYWR7PQTqs
mTKIYZ0g5KA7xLkv5T2dHyU89B1Wcgf9Jbbk9yZGYjUFsRR5pmwUZG5aAY17
JTPKsK+J4dC907Pt2IXwoWqBlx+wOLCQwZw3AhQ0JcGZ/SpT6a7be8gI5gBu
xFsUGPP0zq8AeQMx5CJvbHDYY0FmXBb5csaTHpFHNhO3Ue/p8dF5xALNMbO2
KSDmEVyI6FykGBA9InXUErIKlzydAjGCkWFT8mn0Abli36HZgi6JU1DMTX36
5kynfVOgZH1mpCT8gYksqPrwxqXKKKI+Bzo1U6mzc3hPadUZUmJnTY7OSYhi
+hBd0LN4qgJPEl2OQeQwl0w925Wop+7fXqYdT2Ph2XQVqgrnYzFQhTscGRRD
oLio6ZLSoKKOaJ2i9zWkVmLj6XxaLGkmvyxQAdr6I7JwpGp+EpJPmBqEqhrQ
BKAGaLHsR7IQVfCQPQFfRAWEN/SllrnxX/UNUkeQL0URQfy7JrsOa4UsLP/5
ZqkrdcJE5SF55P/hwUgkCaXd6wVI93L7JgqZvtgZ7oFLxoovKvQoM+hFhn/i
JYYzGMdwRV8ghULi6iXqDg2agCImLUFWAmiWL5hwX5fFXZ+kPuBaJOim8Yzn
z1GB9hLGYo7vb29tAWinU9wB6t8VT5zAHfj6VU17v/0ma0u/gOiAO1gwbXay
ubVLoe8fgyIQ+8bEtyoiB3wYgBoliAOCbbMYiG1WwP1FTkMi39evbEGjSd8A
Wxsvnc7pBva06/LyzebVm0vEmH95/y+bF5dHfSJCyCkmqM6P5CbRknNrnyEe
LeBHyJJaPm5ILISkJJ6MgNqkKbpRb1CDTTzHwaNXDVlQFgkm0BwxmqP9wQOF
aCQLcaggIgUlvCUFL5tMyDnhtSNFc5aimVsgTpLOQILBlHSHWTorUEINZGNm
SxpS4mTkW1kiHqpcc4+wbA/I6EYx/AAGBa4LaUEJZ53oR8aMwFiHYkQVj5H4
jEl7ExjxZGjTSpIVn9+AfniLGuKYbC0jVC9BfRYSwBzGWJyyylMmEpLGRcnC
J86lNFEiWgirQefL6CTSuZPN3E1uEznBcQEKQpxNRkIVwvP24omIJF4cKaPJ
Ih8zGhAkkBo5mu6J93HBF7tpdKyQvRMB4gtKqpYu1xjREAUKoOdi6YIVz8mO
A5PQ/QmUabTGNchL5g10TJ7EBAcHq7IoU0BdOsEB1WBAYYHCiExmt1lCk8W4
SoIjqbQEVYdT6ZdxOlcdHA0ddeWWaqQ5nkQutE7GKMn7FsHLI7K1dkXXCNRc
JeE5WsRLhxFsbXF0n04G5HN4dozrZbsUG2iIYrqN8B5D+0c1TnNgugUAcjpd
0HXXaYGg5Hh5crm9DXNuZTB+zDQBJDBEQH+6vLbHzGGBgCM3z361JlQWDpFu
oeDI36J40uu9LEZINwpSpCq1o8BIfbxECKAqTXWtgaXEoz/8A2m48JwKp4sN
ocSv59M4B1X7NUG0FNuDgFxHZ5K7RCqgjzx8vXDyglgQmVtEHZwsQKki/EE+
AbeYjRIsQLE8N0VQIombOx0ARedbtK+qKMpvGhnfY498jjy5T3qKJ8rEp1lH
h/1ZwsNgutPjM2bApg0QCBiw+O0haYdsTUBeEOzP7unHSF82BhF/Gxhzkgjk
5AgOORynKDvB9CPtVYdlBY8OhEZNCrpiOpD9EIkf/jZqzato+UEJDGprqGHT
2YuFO1XjCkhZAHe8sU1Vvu/erFjdJ30c1QCU6Vh5ELxNvVA/KtEUrgavWZEs
UHYn6sn/YEukvoBHSZ9UqqXDW+mUyA4MfPnhZzFy+JOHS0Lzwu2ZRccgVDPf
ydGJVF4TFTTrcT4G2iYhUWX1Lfgzx5i4DK8cMlgyXLHlFymwx1LgZtMFXRET
Qse4CkyoAD5WK1xIQqGlDWWFcLkqoW0d9idnHCOgelUMzZIFTEgnZw2gbBtA
oVqNSONMiDkGGcBW68oJR8Q4eGi+WAWLXR7b3CpRAlICyJTnlrwcS/TKxRg3
2Q/MAmxbwrgoE98We3Ous9LCdCBLGCOxAENxV4xpgronKehaZXWTzT2bzLz7
hS5IgccG1C7p9U7iPEZjD9qFEv8pO3Rm8d/Zi0ZqD2EPavAZyA0o9qPdkZZT
4BmV6FiKEeWAn830xgBRmuIPGKyHEL/NxiJx4EgjhPG0GH8mgpsWyF/xdJje
ZaXj4G79xV2uVrYRkmHeXuty0X0jY3lEPnEx5KMPghQhwpmZt4daGZmIAbCw
El1nGBOMQUe4kpJsiIwTDPy+u1VMMydZWdXsSyA7NuE6/U1wJnWH/MuiBRKD
D6wbvE4aTC2yzEQRYT2ei+5EO6QNEqPi7+haih/GGViMv1QdXHL/c1FBWbqB
23GbBmQwDYngTMMyYXd1DELFqxLVB1YG6TaKyIM8OR+8LDBm/SSLr3MQ5rIx
sIiiZEpxQ6eBQuKUmLG/z2rBJ8BXCM2RBvHAwVRo8ahuSBKreBne3BTXzpZM
Zm22jCR0fTcBmT2QcXq0+F0DNIxdHNAI9TcGs1w4T0ABDLQo4C5VwauYYTQB
HzzQXzVJdd1uFmKMCbVluFWtm8nSkpQm9ksyPtVkX02NapUS7D25MlvAsUQK
UHu7nhWhiNJVI7IILWVlwFn/QtPbaOUGX0RPtjcYyafXiOM3M2etY/dSbI+L
Fvhkh79ozcVkmuVg94nfAaM6q503Kejhdzcp0eTGF2j6r8c33XO4Y+/YDOs1
p06qJ+lZLYJGTmYJ1aEergrEqTRR7xWJAV5A5wvmpesXoNwRTUYPxQjFNiaG
+Kp34HnlGX2Aon6JS5ds42milin/qiyGWC/QhjT+nKPlDB1Qxo15/P4DClgX
R2/74rHg2DiVnMi7je5OJ2Ra++ryR7FtLWkDU7aITFBbJl1PdHekCnlStKTx
UZw47cGPVKE8ygOiES0Rcg44OmBvq7p7n6TD62E/enN2vmHB6D/SO1K7T6r0
mjQpFj7wbZEEVQtzLp8yRf8n/Ye4fV80MY6DQ7p+FxMRBwxAbRFpXuCWRr39
CC9AKasCjWJM3GLg6QotmnnlBM8ESHJaq7sFxC8ggjSMUgxBE7daoZRM7NDA
MMvI2z/D/BQEMSE6cjTgaSloclN0eN+gBjeNniQLGoW+EqcRvY+6zwZPLH6P
rtMlD3i4itLJKE2lEEf7WdUt2UUxmaANgKQNsoGiLQXwLisSNhOR8lLfADGb
gdDBZiTShhMnagkOIF6WBSswFS2dVEuZaJGj5CwUzgf9IC8h5563bYAcnNCy
gyATogXvWDAhU0dTl66LOfI2ks8VoVgk0mAHYwJBAwFjOuAEvMOmWbR8UdxQ
5WyzoaGcTKrvb5YVRcaw+dFYDlGEgefo0GCLG2EVy3tmUPUJkEHPOqZoRhNS
ppAdLTIgI4wGfcexVAnR53NYTEzSmMQYbaBb3pgTjL1wCltNljr+NSgO4kfr
R1fv3xJ9opC46OtXCaz77bcNQBD0VxpZk2Aq4iZRvzIFRGKZrKSAs7xgISpZ
iF1SPbMYY5T9O9qY8VWExXsep7L6CAHw3csTxIsPJ5cuvIwUw4kYMBX8KNeh
AWvsDXRhjIryaFIaCKEki+/CYBrjVZflh50ZzUAftgcpVy5T8uyDQjMHTEDT
0AxFhoowBw2/0zQuibLmCUMj7YyG4y2wYdGp6O6WuBg0oqAo/Yz0KnCcUcZ2
XbLVifXXxmc5N38wGwAsL/KBD3DD2b3xjm1OfSKnHDdGkV0kRAPSokzpiT1a
tkQXbrgxHN8dMkTYCImwaPiOKKjQmUf7PmJOCTHecA7SS/oUjyIRe4h3ZHdP
Gv4gCjzza3TRk09bc2UTawruh+5gv0Q5RaK61eIaZJ26g9ioIYSCR3BuRmuS
+6wd12O0GsWc2yq0i6k9tlDzH1OyRc4xcuy8eovQZ/cnu0ku3f1nFCfjcDm+
wRGvC85s8JGiHJgkNkn1vFNsV+X8arUiErpf8PNbPFhgFfVyrn4fBf4qI7CJ
M8JFKLab00QGQvrck69f9eFHehdpkhrbyDatvn8nDdF3qHOAQDUt5jiEfREG
GGI8sphRZC1khwC1riJNQrciziZR+wQiqBiWiZHbdYE/VLIdmFEYC07Gvmnd
Gb/x9XFjV73en1PyDMxEafahqLinu5jVZxCLsvSWdUN0fGEIujARzxVpRBI3
gSaV6L1CyklxhsgSUPfDNFmkThfAEkRizmsieM54XknQBcWwko0mS8T/a+06
JL2T8XeQSlIMqmUz5OYwwUmaL1vyp5lAxV5nEiblYJJ9CfwMwm4q5J4xu+D8
/juCZFg+zKZ9OOB8qVZ3AZS+U7B7NC1JbdVbWbHLzZn6zNtOaAwnC883wMmv
jwPMs1HZzACU3XmvdYN8oTsmyxPC2NXooai+Fi3sUvzhkzEQaNHy17SFCFan
RS1e4pRUGqms85akq7sU7eus3joXDDD8XMLrbMwkLICDIUDTY57GarwLKi1j
FHmjJ9kwBXlFLcpAFQcoqNykA459V5FsQ2y2bptLFUMFOkKl71BwJq825w08
RQmzKaf1JZwVtVBUPNzy6NrLyqz6r2hCYQuKtqVJX5K5zvLvmgrvjTlbxw3J
FkMSHSsbOQlOxJfJWc1ak8cn0nw4HO2WVO+NUCAVcyxhf+uONQN5w081KAuV
ipx0Vbzt6B1ZPUUbUhLzB3j9hDFzyUFUqNIiz22G/myoSAdkfO4Vfpbqvz5W
Mqw374dKfmRBxblaWhaZkAP0tbABSlqryL+Qdozv01jvJusS3yBdPCWCXx+j
XP5R/vkbhZidAgurkhJuNI/wwlDqRS7gTZPgssLZuysHd7QdhIvsw+shPbZa
r6HOXx8j8TQLOzIMukrTzwKDZN0geAXho3QGl3wtdfKaCtGmpyew+wGK4mSf
Uyi8RKt1i0SoosV6cIfK9fQSrbJlWsNNvHVaHIxHz1GPbo7Z9xbaGnUBctki
ZOnkR4CzINCnOcVfoxKGBi4E8G2RobiKKjSsahhdgo6Puj8BP2nvqS8ebKbq
o0JkRJxIkkkkyrh0cUqy6arOyCeR5W2AoKU8Z3sYGTKevgId5dfU7/tYon04
VJoCn5XYw74+5wgRwSaK40QCAEvFaCgQk2M0HKcu5JlURBKpn74Xh+FokSNp
DrDCTX4mtgojBlDEOsvBmDI24eXqC+r5Ud/6WShUI0kLhWrgu2Ri/hg8RhR2
bNMg8ENkdKW4Kmy4tA2O+wEIYUC/BN2R7IGKBdLgPP0y5wCJUQqiaYb5hMSz
cdc0VN5xHe7ipVwElybrD0+nDJMYgjMcAJpnASu6zciCoPJ8MaUNYMoi254l
BNkYyYTN08Ge4nmC9s9GYnd9GHWm5MVsGL8M3sBjDDeu2eMlniYxUvY1lmNJ
oDQufhXiKG6IgMt3+W32hcojsIW5hVWY7kYTiCG6yLslRFWwMeRnNoeTG00F
AbzxUd3AYv2zYRXuLriUG+vvk7lHKTvKFKI4Hx0MSUvkKGVpqZRbxL96Acut
craoF5QLYpcr10HFVcEIQDrdJNwD/u0j6LGA/q8WxpGNPMMLISgN38fwKdKD
VFOKEEKxX+MmOTT6qBxlQIOQiyvi3Y+1SOMWMIv7lhxHarf3uhUnpZG6e0IB
7ADQk0bU2e/Ne/xzqoq7Jt817CUcOk8WEjITtzXa78jUY6v4NEXFFW4Jx1Rm
K5L3KMnid+XuIRmE1dxkwLumKBv3myGtHEZ6V3SLsio3Y2ZYw/1vQ0NtEpXE
m/GR83ZF/Wl5nnC5/I1O0+2zd3FnTGjafv/Ixd0Sjvg4cnXDSwwcLc8mwZhp
SEsyElQx5Z1cp3kaJJ8OtIJIdzYE2fSNLwc06DJmXWghOcUgs/tUC7G2u7F8
2symS36g9AksyIPkyrgDBWyUpjCIjkG/5RAc6wTXGG38bBhkMdjMhQmRklJ0
EQmBkCAMmv4Ht0KZ1Af3D4LcBOckFFdeZ2C/HrhLcrBjyDm5NAbxh9okM0Tq
eZGJiYqcGKgUrUhTaboldQfy2M7deaTeBt2V6sAnbkK+1OxJxhSbKUFUneOk
2L2E38DLSIF7fMnygYvSZhMcuYxs8p2J0vQHRoKkK2ei0UpCBH2UEIgAyVQP
2OWQGSO6JN35MkVWMEOhZjphw5LNjqP963Ix62lEtF3xNXjZLl/0fJwlzQhr
1gWj4RfuAFETvNBbYQkW6liU5oQB+m1i1ZlEKImYlIJzQwozzT8mTx6qh3bq
lvsiY29TI/UXX/9YLWHSL04XRKssXVWaCRda1B/x79/YYut/44TlkcnE0uyO
4JIfuUtOC3DJX5R5jEXmcOqukSVqzRFnfsFssbkdWir+vmpEF2ezIh1KgjYa
VM5f7iufIHUZJEhdmQSpqntuzsTydKxBufocqMxWQWOx9odi50BLAv/THk3w
xgoYdufGsXvEheR1wFanU/BqlJmvhNdeghhHzpo8+e3RLyYo6uZBqXwoc7P7
naNSBopJDPLoDGMNKVydEmspCZ01mmbC+devZqd+PxfhGijVVxahgjtidrUY
heI8bmbkagIyKpHESqoMirC4QheQy85JXCJ6LTVqnBACDYHOL8TclNPwtb6d
XVNw/TUoRn2DaGNHMmmPlCAyIscg3kY0HaHgZYfxr8s1Xr1ZDTdB6D59yvFI
JH48fSrr8I/CYE8SSZkMu4oHQH3RCcQCdg7AX5R0MzJ3qJz4kmHaNiok6K2/
V1xTGap7KUOLvKbSAgHcfDFCa/YkXkzrH1dtSr+m4ItRyhTl7oYtsaXI/nin
Uwk+IL8zysZ8UBw7AbhKB/LgU4g5CK9ZkxIQnCpoAlYDx+t+JXOiBMmkrGBO
NGiKEFnzYQlvHOGkIEKfAdqzMOTYE64fUHTe/GGbkAmNOOmQqLVWhqcV7rA7
E26Xhlg6kU2opeazWnIZvvMweokiyVUzfqwh94lIWNl4Z2PScLETEhUhMZDu
ANAV0J5DXYzhx5X7WqzDsDxDiRqDdIkADjCWsPMxOdFZOY4+CHhO+NZ9UBTE
I4vSA4XwjvRazGQ3FH60dAgRsG8fO+iOOig1yZ7Qt/51Lo8UsUQEO7byUa/3
1n5baSy/O3YhAnAx74C+1nD7vfXo6PJ8uN2aoFEHxbulh5FE8fFMct/THA0R
iTBr/ls8KhgUXMZ5hclsMri6sDEqGel16YOkXp5e9KNj/M8J/gdL8/bhPfjz
Pf7nL6cXG86SM5th8QHd+aVqiIx4r8jrSm5FevGjgrcNLYFOdRNLMSu+x368
FggYAs3X1AyCofDG7bs+6xs4oZT58uoHc+QgZ0aCOzyoh5K0hgQ8j45enr/S
DAzOLSERhGrLIJSaS3UVhAJIwJifPn3qoV5whVK7/O+n6BGKr4+izeiR3Fv6
W+8n/6CX7VGv9yMehnMNDXtYYAarYPsBt5/u7vx8/ProAt49L8SIPo9rVHYo
Xwy5i4TrkFUNle5xTcvEkYa9S3rgR/4p+m9fdrYHO6ewmP/2ZXdrsP+S/to/
GTw77b3MalmSX8H21s7ey7Or3rtxndpf9bd3x1enV73X6ZfOL1+f/uXk7F9g
+VekjW1TlcZXxxFWnB72XlINav+hfvXk6M3710ewMPj27Arh9t8Jej/Rfzcf
bcCAR8nfMWIJNnaNFvYCy+SVHLs+7L0HGFWR/x8OfPgEn27Qb1Hjt92dJ27O
Rx9plqf03//1SKe8d04qjxuM+/QQnuHzqDkfblIP9ohNP+hjkex71FC9yRXQ
2qVl9YMqNL0z/0ELY3rneEvgwpj1EDh775HeYSqF/+HJo23a5w79d5f+u0f/
3af/HtB/n9F/D+m/z+EQ3jAczAw6dA+jhyosMtT+SeuhdHz1I+f9ctJBwnYL
wOsPV8eedKIk9uH87C++1gWA/ur4BD5CTtYcEnAabYYneHvlN4/lm5HF6s3I
Y/FmZHGzd9/Zv2b+HeIbPqRfwtPHJ6808jvyy+v1wl+IogC13dnhk8A/9w/0
z91D93R/e8f8OeD3e9H6/7m3ecjhcHjvJv+ULrOkuUl6CF9+qMiZgCl0KgrF
hjbL1yEgFNr3zuwr6JqZ3UP/sxuaJ3PPgZPdFAlB3sza/BkJeBVXVTyYV0y6
04QK/a4EEAYRn/7PD6fnx6fRu1ctIkS7/xOaC/yq3UP/c2PV7jkxF4Mf4Q+R
rLdzocifjlhyQNGD3SRLPhmXdfDkEwJkqP/+9GPEwgVIgIOdDSf6MWSr8Q36
rJ98clAbzghs7rO/XlweXV4eDd5fXv7tiZbMJPv2MEvrCdUTvaln081yMsa+
BY/nWEl15/kGfHrK6/ffyYaG43K4nA/rYnNjg1Qr2gGIAujulvXzvz5t9M1q
7TLhKf6I5j5vLX/yyUFzCP8GlfTThpH/DLURkyFWcKthFKQX/egm/RKDAAdU
eUojM7Eg9ptfs/oseVgUUopdFczkDWnQC5nvOatzhrGjdyhUxyS2CHTWDEFU
0SxKV9LrnXK5SP8lWx4XFDVtOU4DIlnyScOfzEs8bV/i/GWDJJ4jzuwfBGqQ
vf2IjWiWFRC7kj+qun5i4vKpH31iWop/+Wv/iWU9v8Tqkw8DczZX2RSOdZbo
UB6/7Yiyxeaw8hhNFAvktqidcqXpqai+uAmEQpn+HevtxK1lkGXBhanrQGT3
oWQYWEFB/hnYNf/qTikQM/22JBwcU9dfRLE3mwClulZUTxPEcco18pH6gaE+
DAbwXzMTx6+5Wp3bTziCGjzDaeV0NrjaaHNp4jH1402o8nGtniFOM/ukgjSd
BqA0FiFm7Xc5d15bBxsJ3pN6Vyxn22pXuE6VDGBTmJb2ycgHMsmXeSblFkJp
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
3+NKsa154Neu8uu9/wN736IPTyUBAA==

-->

</rfc>

