<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="noDerivativesTrust200902" docName="uptane-standard-design" category="info">

  <front>
    <title abbrev="UPTANE">Uptane IEEE-ISTO Standard for Design and Implementation</title>

    <author initials="J." surname="Cappos" fullname="Justin Cappos">
      <organization>NYU Tandon School of Engineering</organization>
      <address>
        <postal>
          <street>todo</street>
          <city>New York</city>
          <region>NY</region>
          <code>todo</code>
          <country>USA</country>
        </postal>
        <email>redacted@nyu.edu</email>
      </address>
    </author>

    <date year="2018" month="August" day="28"/>

    <area>TODO</area>
    <workgroup>TODO</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes a framework for securing automotive software update systems.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Uptane is a secure software update framework for automobiles. This document describes procedures to enable programmers for OEMs and suppliers to design and implement this framework to better protect connected units on cars. Integrating Uptane as outlined in the sections that follow can reduce the ability of attackers to compromise critical systems. It also assures a faster and easier recovery process should a compromise occur.</t>

<t>These instructions specify the components necessary for a compliant implementation. Individual implementors can make their own technological choices within those requirements. This flexibility makes Uptane adaptable to the many customized update solutions used by manufacturers.</t>

</section>
<section anchor="terminology" title="Terminology">

<section anchor="conformance-terminology" title="Conformance Terminology">

<t>The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be  interpreted as described in <xref target="RFC2119"/>.</t>

<t>In order to be considered “Uptane-compliant,” an implementation MUST follow all of these rules as specified in the document.</t>

</section>
<section anchor="automotive-terminology" title="Automotive Terminology">

<t><spanx style="emph">Bus</spanx>: An internal communications network that interconnects components within a vehicle. A car can have a number of buses that will vary in terms of power, speed and resources.<vspace />
<spanx style="emph">Image</spanx>: File containing software for an ECU to install. May contain a binary image to flash, installation instructions, and other necessary information for the ECU to properly apply the update. Each ECU typically holds only one image, although this may vary in some cases.<vspace />
<spanx style="emph">Primary/Secondary ECUs</spanx>: Terms used to describe the control units within an automobile. A primary ECU downloads from a repository and verifies update images and metadata for itself and for secondary ECUs, and distributes images and metadata to secondaries. Thus, it requires extra storage space and a connection to the internet. Secondary ECUs receive their update images and metadata from the primary, and only need to verify and install their own metadata and images.<vspace />
<spanx style="emph">Repository</spanx>: A server containing metadata about images. May also contain the images themselves.<vspace />
<spanx style="emph">Suppliers</spanx>: Independent companies to which auto manufacturers may outsource the production of ECUs. Tier-1 suppliers directly serve the manufacturers. Tier-2 suppliers are those that perform outsourced work for Tier-1 suppliers.<vspace />
<spanx style="emph">Vehicle Version Manifest</spanx>: A compilation of all ECU version manifests on a vehicle. It serves as a master list of all images currently running on all ECUs in the vehicle.</t>

</section>
<section anchor="uptane-role-terminology" title="Uptane Role Terminology">

<t>These terms are defined in greater detail in <xref target="roles"/>.</t>

<t><spanx style="emph">Delegations</spanx>: Designating the responsibility of signing metadata about images to another party.<vspace />
<spanx style="emph">Roles</spanx>: The roles mechanism of Uptane allows the system to distribute signing responsibilities so that the compromise of one key does not necessarily impact the security of the entire system.</t>

<t><list style="symbols">
  <t><spanx style="emph">Root Role</spanx>: Distributes and revokes public keys used to verify the root, timestamp, snapshot, and targets role metadata.</t>
  <t><spanx style="emph">Snapshot Role</spanx>: Indicates which images the repository has released at the same time.</t>
  <t><spanx style="emph">Targets Role</spanx>: Holds the metadata used to verify the image, such as cryptographic hashes and file size.</t>
  <t><spanx style="emph">Timestamp Role</spanx>: Indicates if there are any new metadata or image on the repository.</t>
</list></t>

</section>
<section anchor="acronyms-and-abbreviations" title="Acronyms and Abbreviations">

<t><spanx style="emph">CAN Bus</spanx>: Controller Area Network bus standard.<vspace />
<spanx style="emph">ECUs</spanx>: Electronic Control Units, the computing units on vehicle.<vspace />
<spanx style="emph">LIN Bus</spanx>: Local Interconnect Bus.<vspace />
<spanx style="emph">SOTA</spanx>: Software Updates Over-the-Air.<vspace />
<spanx style="emph">VIN</spanx>: Vehicle Identification Number.</t>

</section>
</section>
<section anchor="rationale-for-and-scope-of-uptane-standards" title="Rationale for and Scope of Uptane Standards">

<t>This Standards document clarifies the essential components and best practices for the secure design implementation and deployment of Uptane by OEMs and suppliers. These practices contribute to compromise resilience, or the ability to minimize the extent of the threat posed by any given attack.</t>

<section anchor="why-uptane-requires-standards" title="Why Uptane requires standards">

<t>A standards document that can guide the safe design, integration and deployment of Uptane in cars is needed at this time because:</t>

<t><list style="symbols">
  <t>The number of connected units on the average vehicle continues to grow, with mainstream cars now containing up to 100 million lines of code. <xref target="USATODAY"/></t>
  <t>The expanded use of software over-the-air strategies creates new attack surfaces for malicious parties. <xref target="CR-OTA"/></t>
  <t>Legacy update strategies, such as SSL/TLS or GPG/RSA, are not feasible for use on automotive ECUs because they force manufacturers to chose between enhanced security and customizability.</t>
  <t>Conventional strategies are also complicated by the differing resources of the ECUs, which can vary greatly in memory, storage space, and Internet connectivity.</t>
  <t>The design of Uptane makes it possible to offer improved design flexibility, without sacrificing security.</t>
  <t>This added design flexibility, however, could be a liability if the framework is implemented incorrectly.</t>
  <t>Standardization of crucial steps in the design, implementation and use of Uptane can assure that customizability does not impact security or functionality.</t>
</list></t>

</section>
<section anchor="scope-of-standards-coverage" title="Scope of Standards Coverage">

<t>This document sets guidelines for implementing Uptane in most systems capable of updating software on connected units in cars. In this section, we define the scope of that applicability by providing sample use cases and possible exceptions, aspects of update security that are not applicable to Uptane, and the design requirements governing the preparation of these standards.</t>

<section anchor="use-cases" title="Use Cases">

<t>The following use cases provide a number of scenarios illustrating the manner in which software updates could be accomplished using Uptane.</t>

<section anchor="oems-initializing-uptane-at-the-factory-using-sota" title="OEMs initializing Uptane at the factory using SOTA">

<t>Bob, who works for an OEM, is overseeing the installation of Uptane on new vehicles at a manufacturing plant. He starts with preparing the ECUs by adding the following components: code to perform full and partial verification, the latest copy of the relevant metadata, the public keys, and the latest time, signed by the time server. His implementation would be considered Uptane-compliant if:</t>

<t><list style="numbers">
  <t>all primaries perform full verification;</t>
  <t>all secondaries that are updated via OTA perform full or partial verification; and</t>
  <t>all other ECUs that do not perform verification cannot be updated via OTA.</t>
</list></t>

</section>
<section anchor="updating-one-ecu-with-a-complete-image" title="Updating one ECU with a complete image">

<t>Alice, a Tier-1 supplier, completes work on a revised image for an electronic brake control module. This module will control the brakes on all models of an SUV produced by the OEM for whom Clark is in charge of electronic systems. Alice signs the image, then delivers it and all of its metadata, including delegations, and associated images to Clark. Clark adds these metadata and images to the image repository, along with information about any dependencies and conflicts between this image and those on other ECUs. Clark also updates the inventory database, so that the director repository can instruct the ECU on how to install these updated images.</t>

</section>
<section anchor="dealership-updating-individual-ecus-on-demand" title="Dealership updating individual ECUs on demand">

<t>Dana runs a dealership for a major OEM. The OEM has issued a recall to address a problem with a keyless entry device that has been locking people out of their cars. Individual owners are bringing in a revised image on a flash drive that was sent to them from the manufacturer via courier mail. To carry out this update, the OEM would first have to delegate to Dana the authority to sign the metadata that would need to accompany the image on the flashdrive. He would then follow the same procedures used by Clark in the example above.</t>

</section>
<section anchor="update-one-ecu-with-multiple-deltas" title="Update one ECU with multiple deltas">

<t>Frances needs to update an On-Board Diagnostics port and has several new images to download. To save bandwidth costs, she uses delta images that contain only the code and/or data that has changed from the previous image installed by the ECU. To do so, she must first modify the director repository using the vehicle version manifest and dependency resolution to determine the differences between the previous and latest images. Frances then adds the following to the custom targets metadata used by the director repository: (1) the algorithm used to apply a delta image and (2) the targets metadata about the delta image. Frances would also check whether the delta images match the targets metadata from the director repository.</t>

</section>
</section>
</section>
<section anchor="exceptions" title="Exceptions">

<t>There are a number of factors that could impede the completion of the above scenarios:
* ECUs may be lacking the necessary resources to function as designated. These resources could include weaknesses, in terms of CPU or RAM, that prevent performance of public key cryptography; or they may lack sufficient storage to undo installation of bad software; or they simply may reside on a low-speed network (e.g., LIN)
* ECUs may reside on different network segments, and may not be able to directly reach each other, requiring a gateway to facilitate communication.
* A user may replace OEM-installed ECUs with aftermarket ECUs instead.
* A vehicle may be able to download only a limited amount of data via a cellular channel (due to limits on a data plan).
* A system may lack sufficient power to download or install software updates.
* Vehicles may be offline for extended periods of time, thus missing required updates (e.g., key rotations).
* OEMs may be unwilling to implement costly security or hardware requirements.</t>

</section>
<section anchor="out-of-scope" title="Out of Scope">

<t>The following topics will not be addressed in this document, as they represent threats outside the scope of Uptane:</t>

<t><list style="symbols">
  <t>Physical attacks, such as manual tampering with ECUs outside the vehicle.</t>
  <t>Compromise of the supply chain (e.g., build system, version control system, packaging process). A number of strategies already (e.g., git signing, TPMs, in-toto <xref target="IN-TOTO"/>) exist to address this problem. Therefore, there is no need duplicate those techniques here.</t>
  <t>Problems associated with OBD or UDS programming of ECUs, such as authentication of communications between ECUs.</t>
</list></t>

</section>
<section anchor="design-requirements" title="Design Requirements">

<t>The design requirements for this document are governed by three principal parameters:</t>

<t><list style="symbols">
  <t>to clearly mandate the design and implementation steps that are security critical and must be followed as is, while offering flexibility in the implementation of non-critical steps. In this manner, users can adapt to support different use models and deployment scenarios.</t>
  <t>to delineate best practices to ensure that, should a vehicle be attacked, an attacker is forced to compromise many different systems.</t>
  <t>to ensure that, if implemented, the security practices mandated or suggested in this document do not interfere with the functionality of ECUs, vehicles, or the manufacturing systems on which they run.</t>
</list></t>

</section>
</section>
<section anchor="threat-model-and-attack-strategies" title="Threat Model and Attack Strategies">

<t>The overarching goal of Uptane is to provide a system that is resilient in the face of various types of compromise. In this section, we describe the goals that an attacker may have (<xref target="attacker_goals"/>) and the capabilities they may have or develop (<xref target="capabilities"/>). We then describe and classify types of attack on the system according to the attacker’s goals (<xref target="threats"/>).</t>

<section anchor="attacker_goals" title="Attacker goals">

<t>We assume that attackers may want to achieve one or more of the following goals, in increasing order of severity:</t>

<t><list style="symbols">
  <t>Read the contents of updates to discover confidential information or reverse-engineer firmware</t>
  <t>Deny installation of updates to prevent vehicles from fixing software problems</t>
  <t>Cause one or more ECUs in the vehicle to fail, denying use of the vehicle or of certain functions</t>
  <t>Control the vehicle or ECUs within the vehicle</t>
</list></t>

</section>
<section anchor="capabilities" title="Attacker capabilities">

<t>Uptane is designed with resilience to compromise in mind. We assume that attackers may develop one or more of the following capabilities:</t>

<t><list style="symbols">
  <t>Read and analyze the contents of previous and/or current versions of software, as well as the update sequence and instructions</t>
  <t>Intercept and modify network traffic (i.e., perform man-in-the-middle attacks). This capability may be developed in two domains:
  <list style="symbols">
      <t>Outside the vehicle, intercepting and modifying traffic between the vehicle and software repositories</t>
      <t>Inside the vehicle, intercepting and modifying traffic on one or more vehicle buses (e.g. via an OBD port or using a compromised ECU as a vector)</t>
    </list></t>
  <t>Compromise and control one or more ECUs within a vehicle</t>
  <t>Compromise signing or encryption keys</t>
  <t>Compromise and control software repository servers (and any keys stored on the repository)</t>
</list></t>

</section>
<section anchor="threats" title="Description of threats">

<t>Uptane’s threat model considers the following types of attack, organized according to the attacker goals listed in <xref target="attacker_goals"/>.</t>

<section anchor="read_updates" title="Read updates">

<t><list style="symbols">
  <t><spanx style="emph">Eavesdrop attack:</spanx> Read the unencrypted contents of an update sent from a repository to a vehicle.</t>
</list></t>

</section>
<section anchor="deny_updates" title="Deny installation of updates">

<t>An attacker seeking to deny installation of updates may attempt one or more of the following strategies:</t>

<t><list style="symbols">
  <t><spanx style="emph">Drop-request attack:</spanx> Block network traffic outside or inside the vehicle.</t>
  <t><spanx style="emph">Slow retrieval attack:</spanx> Slow down network traffic, in the extreme case sending barely enough packets to avoid a timeout. Similar to a drop-request attack, except that both the sender and receiver of the traffic still think network traffic is unimpeded.</t>
  <t><spanx style="emph">Freeze attack:</spanx> Continue to send a previously known update to an ECU, even if a newer update exists.</t>
  <t><spanx style="emph">Partial bundle installation attack:</spanx> Install updates to some ECUs, but freeze updates on others.</t>
</list></t>

</section>
<section anchor="change_functionality" title="Interfere with ECU functionality">

<t>Attackers seeking to interfere with the functionality of vehicle ECUs in order to cause an operational failure or unexpected behaviour may do so in one of the following ways:</t>

<t><list style="symbols">
  <t><spanx style="emph">Rollback attack:</spanx> Cause an ECU to install a previously-valid software revision that is older than the currently-installed version.</t>
  <t><spanx style="emph">Endless data attack:</spanx> Send a large amount of data to an ECU, until it runs out of storage, possibly causing the ECU to fail to operate.</t>
  <t><spanx style="emph">Mix-and-match attack:</spanx> Install a set of images on ECUs in the vehicle that are incompatible with each other. This may be accomplished even if all of the individual images being installed are valid, as long as there exist valid versions that are mutually incompatible.</t>
</list></t>

</section>
<section anchor="control_ecu" title="Control an ECU or vehicle">

<t>Full control of a vehicle, or one or more ECUs within a vehicle, is the most severe threat.</t>

<t><list style="symbols">
  <t><spanx style="emph">Arbitrary software attack:</spanx> Cause an ECU to install and run arbitrary code of the attacker’s choice.</t>
</list></t>

</section>
</section>
</section>
<section anchor="detailed-design-of-uptane" title="Detailed Design of Uptane">

<t>Uptane is a secure software update framework for automobiles. We do not specify implementation details. Instead, we describe the components necessary for a compliant implementation, and leave it up to individual implementors to make their own technological choices within those requirements.</t>

<t>At a high level, Uptane requires:</t>

<t><list style="symbols">
  <t>Two software repositories:
  <list style="symbols">
      <t>An image repository containing binary images for install, and signed metadata about those images</t>
      <t>A director repository connected to an inventory database that can sign metadata on demand for images in the image repository</t>
    </list></t>
  <t>Repository tools for generating Uptane-specific metadata about images</t>
  <t>A public key infrastructure supporting the required metadata production/signing roles on each repository:
  <list style="symbols">
      <t>Root - Certificate authority for the repo. Distributes public keys for verifying all the other roles’ metadata</t>
      <t>Timestamp - Indicates whether there are new metadata or images</t>
      <t>Snapshot - Indicates images released by the repository at a point in time, via signing metadata about targets metadata</t>
      <t>Targets - Indicates metadata about images, such as hashes and file sizes</t>
    </list></t>
  <t>A time server to deliver cryptographically verifiable time to ECUs</t>
  <t>An in-vehicle client on a primary ECU capable of verifying the signatures on all update metadata, handling all server communication, and downloading updates on behalf of secondary ECUs</t>
  <t>A client or library on each secondary ECU capable of performing either full or partial verification of metadata</t>
</list></t>

<section anchor="roles" title="Roles on repositories">

<t>A repository contains images and metadata. Each role has a particular type of metadata associated with it, as described in <xref target="meta_syntax"/>.</t>

<section anchor="root_role" title="The Root role">

<t>The Root role SHALL be responsible for a Certificate Authority as defined in <xref target="RFC3647"/>.
The Root role SHALL produce and sign Root metadata as described in <xref target="root_meta"/>.
The Root role SHALL sign the public keys used to verfy the metadata produced by the Timestamp, Snapshot, and Targets roles.
The Root role SHALL revoke keys for the other roles, in case of compromise.</t>

</section>
<section anchor="targets_role" title="The Targets role">

<t>The Targets role SHALL produce and sign metadata about images and delegations as described in <xref target="targets_meta"/>.</t>

<section anchor="delegations" title="Delegations">

<t>The Targets role on the Image repository MAY delegate the responsibility of signing metadata to other, custom-defined roles. If it does, it MUST do so as specified in <xref target="delegations_meta"/>.</t>

<t>Responsibility for signing images or a subset of images MAY be delegated to more than one role, and therefore it is possible for two different roles to be trusted for signing a particular image. For this reason, delegations MUST be prioritized.</t>

<t>A particular delegation for a subset of images MAY be designated as <spanx style="strong">terminating</spanx>. For terminating delegations, the client SHALL NOT search the any further if it does not find validly signed metadata about those images in the terminating delegation. Delegations SHOULD NOT be terminating by default; terminating delegations SHOULD only be used when there is a compelling technical reason to do so.</t>

<t>A delegation for a subset of images MAY be a multi-role delegation <xref target="TAP-3"/>. A multi-role delegation indicates that each of the delegatee roles MUST sign the same metadata.</t>

<t>Delegations only apply to the Image repository. The Targets role on the Director repository MUST NOT delegate metadata signing responsibility.</t>

</section>
</section>
<section anchor="snapshot_role" title="The Snapshot role">

<t>The Snapshot role SHALL produce and sign metadata about all Targets metadata the repository releases, including the current version number and hash of the main Targets metadata and the version numbers and hashes of all delegated targets metadata, as described in <xref target="snapshot_meta"/>.</t>

</section>
<section anchor="timestamp_role" title="The Timestamp role">

<t>The Timestamp role SHALL produce and sign metadata indicating whether there are new metadata or images on the repository. It MUST do so by signing the metadata about the Snapshot metadata file.</t>

</section>
</section>
<section anchor="meta_syntax" title="Metadata abstract syntax">

<t>Metadata files on a repository SHOULD be written using the ASN.1 abstract syntax specified in this section.  These files MAY be encoded and decoded using any transfer syntax that an OEM desires (e.g., BER, CER, DER, JSON, OER, PER, XER).</t>

<section anchor="common_metadata" title="Common Metadata Structures and Formats">

<t>Metadata files SHOULD share the data structures in this section. These data structures specify how information, such as cryptographic hashes, digital signatures, and public keys, should be encoded.</t>

<t>This is An ASN.1 module that defines common data structures used by metadata files.</t>

<t>```
CommonModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>EXPORTS ALL;</t>

<t>RoleType        ::= ENUMERATED {root, targets, snapshot, timestamp}</t>

<t>– String types.
  Filename        ::= VisibleString (SIZE(1..32))
  – No known path separator allowed in a strict filename.
  StrictFilename  ::= VisibleString (SIZE(1..32))
                                    (PATTERN “[^/\]+”)
  BitString       ::= BIT STRING    (SIZE(1..1024))
  OctetString     ::= OCTET STRING  (SIZE(1..1024))
  HexString       ::= VisibleString (SIZE(1..1024))
                                    (PATTERN “[0-9a-f]+”)
  – Table 1 of RFC 4648.
  Base64String    ::= VisibleString (SIZE(1..1024))
                                    (PATTERN “[A-Za-z0-9+/=]+”)
  – Adjust length of SEQUENCE OF to your needs.
  Paths           ::= SEQUENCE (SIZE(1..8)) OF Path
  Path            ::= VisibleString (SIZE(1..32))
                                    (PATTERN “[\w*\/]+”)
  – Adjust length of SEQUENCE OF to your needs.
  URLs            ::= SEQUENCE (SIZE(0..8)) OF URL
  URL             ::= VisibleString (SIZE(1..1024))
  – A generic identifier for vehicles, primaries, secondaries.
  Identifier      ::= VisibleString (SIZE(1..32))</t>

<t>Natural         ::= INTEGER (0..MAX)
  Positive        ::= INTEGER (1..MAX)
  Length          ::= Positive
  Threshold       ::= Positive
  Version         ::= Positive
  – The date and time in UTC encoded as a UNIX timestamp.
  UTCDateTime     ::= Positive</t>

<t>BinaryData      ::= CHOICE {
    bitString     BitString,
    octetString   OctetString,
    hexString     HexString,
    base64String  Base64String
  }</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  Hashes          ::= SEQUENCE (SIZE(1..8)) OF Hash
  Hash            ::= SEQUENCE {
    function      HashFunction,
    digest        BinaryData
  }
  HashFunction ::= ENUMERATED {sha224, sha256, sha384, sha512, sha512-224,
                               sha512-256, …}</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  Keyids          ::= SEQUENCE (SIZE(1..8)) OF Keyid
  – Usually, a hash of a public key.
  Keyid           ::= HexString</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  Signatures      ::= SEQUENCE (SIZE(1..8)) OF Signature
  Signature       ::= SEQUENCE {
    keyid         Keyid,
    method        SignatureMethod,
    – For efficient checking, sign the hash of the message instead of the
    – message itself.
    hash          Hash,
    – The signature itself.
    value         HexString
  }
  SignatureMethod ::= ENUMERATED {rsassa-pss, ed25519, …}</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  PublicKeys      ::= SEQUENCE (SIZE(1..8)) OF PublicKey
  PublicKey       ::= SEQUENCE {
    publicKeyid     Keyid,
    publicKeyType   PublicKeyType,
    publicKeyValue  BinaryData
  }
  PublicKeyType   ::= ENUMERATED {rsa, ed25519, …}</t>

<t>END
```
An OEM MAY use any hash function (<spanx style="verb">Hash.function</spanx>; e.g., SHA-2) and signature scheme (<spanx style="verb">Signature.method</spanx>; e.g., <eref target="https://tools.ietf.org/html/rfc3447#page-29">RSASSA-PSS</eref>, <eref target="https://ed25519.cr.yp.to/">Ed25519</eref>).</t>

<t>A hash digest (<spanx style="verb">Hash.digest</spanx>), signature (<spanx style="verb">Signature.sig</spanx>), or public key (<spanx style="verb">PublicKey.keyval</spanx>) SHOULD be encoded as either a bit, octet, hexadecimal, or Base64 string. For example, an RSA public key MAY be encoded using the PEM format, whereas an Ed25519 public key MAY be encoded as a hexadecimal string.</t>

<t>Every public key has a unique identifier (<spanx style="verb">PublicKey.keyid</spanx>). This identifier MAY be, for example, the SHA-256 hash of the public key.</t>

<t>An ECU SHOULD verify that each <spanx style="verb">Keyids</spanx>, <spanx style="verb">Hashes</spanx>, <spanx style="verb">Signatures</spanx>, and <spanx style="verb">PublicKeys</spanx> sequence contains unique <spanx style="verb">KeyId</spanx>, <spanx style="verb">Hash.function</spanx>, <spanx style="verb">Signature.keyid</spanx>, and <spanx style="verb">PublicKey.keyid</spanx> values, respectively. The ECU MAY reject a sequence containing duplicate values, or simply ignore such values.</t>

<t>Every metadata file contains three parts: a signed message (<spanx style="verb">Signed</spanx>), the number of signatures on the following message (<spanx style="verb">numberOfSignatures</spanx>), and a sequence of signatures for the message (<spanx style="verb">Signatures</spanx>).</t>

<t>The signed message is a sequence of four attributes: (1) <spanx style="verb">type</spanx>, an enumerated type of the metadata (i.e., root, targets, snapshot, or timestamp), (2) <spanx style="verb">expires</spanx>, an expiration date and time for the metadata (specified using the ISO 8601 format), (3) <spanx style="verb">version</spanx>, a version number, and (4) <spanx style="verb">body</spanx>, the role-specific metadata. The version number SHOULD be incremented every time the metadata file is updated. The attributes of role-specific metadata will be discussed in the rest of this section.</t>

<t>Signatures SHOULD be computed over the hash of the signed message, instead of the signed message itself.</t>

<t>Below is an example of the metadata format common to all metadata. All metadata SHOULD follow this format.
```
MetadataModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>EXPORTS Metadata;</t>

<t>– https://sourceforge.net/p/asn1c/discussion/357921/thread/aced2512/
  IMPORTS Length,
          Positive,
          RoleType,
          Signatures,
          UTCDateTime       FROM CommonModule
          RootMetadata      FROM RootModule
          TargetsMetadata   FROM TargetsModule
          SnapshotMetadata  FROM SnapshotModule
          TimestampMetadata FROM TimestampModule;</t>

<t>Metadata      ::= SEQUENCE {
    signed              Signed,
    numberOfSignatures  Length,
    signatures          Signatures
  }
  Signed        ::= SEQUENCE {
    type        RoleType,
    expires     UTCDateTime,
    version     Positive,
    body        SignedBody
  }
  SignedBody    ::= CHOICE {
    rootMetadata      RootMetadata,
    targetsMetadata   TargetsMetadata,
    snapshotMetadata  SnapshotMetadata,
    timestampMetadata TimestampMetadata
  }</t>

<t>END
```</t>

</section>
<section anchor="root_meta" title="Root Metadata">

<t>The root metadata distributes and revokes the public keys of the top-level root, targets, snapshot, and timestamp roles. These keys are revoked and replaced by changing the public keys specified in the root metadata. This metadata is signed using the root role’s private keys.</t>

<t>The root metadata contains two important attributes. First, the <spanx style="verb">keys</spanx> attribute lists the public keys used by the root, targets, snapshot, and timestamp roles. Second, the <spanx style="verb">roles</spanx> attribute maps each of the four roles to: (1) the URL pointing to its metadata file, (2) its public keys, and (3) the threshold number of keys required to sign the metadata file. An empty sequence of URLs denotes that the metadata file SHALL NOT be updated. An ECU SHOULD verify that each of the four roles has been defined exactly once in the metadata.</t>

<t>Here is the ASN.1 definition for the body of the root metadata.
```
RootModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>EXPORTS RootMetadata;</t>

<t>IMPORTS Keyids,
          Length,
          PublicKeys,
          RoleType,
          Threshold,
          URLs FROM CommonModule;</t>

<t>RootMetadata ::= SEQUENCE {
    numberOfKeys  Length,
    keys          PublicKeys,
    numberOfRoles Length,
    roles         TopLevelRoles,
    – https://tools.ietf.org/html/rfc6025#section-2.4.2
    …
  }
  – Adjust length of SEQUENCE OF to your needs.
  TopLevelRoles ::= SEQUENCE (SIZE(4)) OF TopLevelRole
  TopLevelRole  ::= SEQUENCE {
    role            RoleType,
    – TAP 5: The URLs pointing to the metadata file for this role.
    numberOfURLs    Length OPTIONAL,
    urls            URLs OPTIONAL,
    numberOfKeyids  Length,
    keyids          Keyids,
    threshold       Threshold,
    …
  }</t>

<t>END
```</t>

</section>
<section anchor="targets_meta" title="Targets Metadata">

<t>At a minimum, a targets metadata file contains metadata (i.e., filename, hashes, length) about unencrypted images on a repository. The file MAY also contain two optional pieces of information: (1) custom metadata about which images should be installed by which ECUs, and whether encrypted images are available, and / or (2) other delegated targets roles that have been entrusted to sign images. This file is signed using the private keys of either the top-level targets role or a delegated targets role.</t>

<t>The following example specifies all of the REQUIRED as well as all of the RECOMMENDED attributes for the body of targets metadata.
```
TargetsModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>EXPORTS TargetsMetadata, Target;</t>

<t>IMPORTS BinaryData,
          Filename,
          Hashes,
          Identifier,
          Keyids,
          Length,
          Natural,
          Paths,
          Positive,
          PublicKeys,
          StrictFilename,
          Threshold FROM CommonModule;</t>

<t>TargetsMetadata ::= SEQUENCE {
    – Allowed to have no targets at all.
    numberOfTargets Natural,
    – Metadata about unencrypted images on a repository.
    targets         Targets,
    – Delegations are optional.
    delegations     TargetsDelegations OPTIONAL,
    – https://tools.ietf.org/html/rfc6025#section-2.4.2
    …
  }</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  Targets           ::= SEQUENCE (SIZE(1..128)) OF TargetAndCustom
  TargetAndCustom   ::= SEQUENCE {
    – The filename, length, and hashes of unencrypted images on a repository.
    target  Target,
    – This attribute is used to specify additional information, such as which
    – images should be installed by which ECUs, and metadata about encrypted
    – images.
    custom  Custom OPTIONAL
  }
  Target ::= SEQUENCE {
    fileDownloadUrl URL,
    filename        Filename,
    length          Length,
    numberOfHashes  Length,
    hashes          Hashes
  }
  Custom ::= SEQUENCE {
    – NOTE: The following attributes are specified by both the image and
    – director repositories.
    – The release counter is used to prevent rollback attacks on images when
    – only the director repository is compromised.
    – Every ECU should check that the release counter of its latest image is
    – greater than or equal to the release counter of its previous image.
    releaseCounter        Natural OPTIONAL,
    – The hardware identifier is used to prevent the director repository,
    – when it is compromised, from choosing images for an ECU that were not
    – meant for it.
    – Every ECU should check that the hardware ID of its latest image matches
    – its hardware ID.
    – An OEM MAY define other types of information to further restrict the
    – choices that can be made by a compromised director repository.
    hardwareIdentifier    Identifier OPTIONAL,
    – NOTE: The following attributes are specified only by the director
    – repository.
    – The ECU identifier specifies information, e.g., serial numbers, that the
    – director uses to point ECUs as to which images they should install.
    – Every ECU should check that the ECU ID of its latest image matches its
    – own ECU ID.
    ecuIdentifier         Identifier OPTIONAL,
    – This attribute MAY be used by the director to encrypt images per ECU.
    encryptedTarget       Target OPTIONAL,
    – This attribute MAY be used if ECU keys are asymmetric, and a per-image
    – symmetric encryption key is desired for faster decryption of images.
    – In that case, the director would use the asymmetric ECU key to encrypt
    – this symmetric key.
    encryptedSymmetricKey EncryptedSymmetricKey OPTIONAL,
    …
  }
  EncryptedSymmetricKey ::= SEQUENCE {
    – This is the symmetric key type.
    encryptedSymmetricKeyType   EncryptedSymmetricKeyType,
    – This is the symmetric key encrypted using the asymmetric ECU key.
    encryptedSymmetricKeyValue  BinaryData
  }
  EncryptedSymmetricKeyType ::= ENUMERATED {aes128, aes192, aes256, …}</t>

<t>– https://github.com/theupdateframework/taps/blob/master/tap3.md
  TargetsDelegations  ::= SEQUENCE {
    – The public keys of all delegatees.
    numberOfKeys        Length,
    keys                PublicKeys,
    – The role name, filename, public keys, and threshold of a delegatee.
    numberOfDelegations Length,
    – A list of paths to roles, listed in order of priority.
    delegations         PrioritizedPathsToRoles
  }</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  PrioritizedPathsToRoles ::= SEQUENCE (SIZE(1..8)) OF PathsToRoles
  PathsToRoles ::= SEQUENCE {
    – A list of image/target paths entrusted to these roles.
    numberOfPaths   Length,
    paths           Paths,
    – A list of roles required to sign the same metadata about the matching
    – targets/images.
    numberOfRoles   Length,
    roles           MultiRoles,
    – Whether or not this delegation is terminating.
    terminating     BOOLEAN DEFAULT FALSE
  }</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  MultiRoles ::= SEQUENCE (SIZE(1..8)) OF MultiRole
  MultiRole ::= SEQUENCE {
    – The rolename (e.g., “supplierA-dev”).
    – No known path separator allowed in a rolename.
    rolename        StrictFilename,
    – The public keys used by this role.
    numberOfKeyids  Length,
    keyids          Keyids,
    – The threshold number of these keys.
    threshold       Threshold
  }</t>

<t>END
```</t>

<section anchor="metadata-about-images" title="Metadata about Images">

<t>At the very least, a targets metadata file MUST contain the <spanx style="verb">TargetsMetadata.targets</spanx> attribute, which specifies a sequence of unencrypted images. An empty sequence is used to indicate that no targets/images are available. For every unencrypted image, its filename, version number, length, and hashes are listed using the <spanx style="verb">Target</spanx> sequence. An ECU SHOULD verify that each unencrypted image has been defined exactly once in the metadata file.</t>

<t>The unencrypted image SHOULD also be associated with additional information using the <spanx style="verb">Custom</spanx> sequence. The following attributes SHOULD be specified by both the image and director repositories. The <spanx style="verb">Custom.releaseCounter</spanx> attribute is used to prevent rollback attacks when the director repository is compromised. The director repository cannot choose images for an ECU with a release counter that is lower than the release counter of the image it has currently installed. The <spanx style="verb">Custom.hardwareIdentifier</spanx> attribute is used to prevent a compromised director repository from causing ECUs to install images that were not intended for them. For example, this attribute MAY be the ECU part number. The OEM and its suppliers MAY define other attributes that can be used by ECUs to further restrict which types of images they are allowed to install.</t>

<t>The following attributes SHOULD be specified by the director repository. The <spanx style="verb">Custom.ecuIdentifier</spanx> attribute specifies the identifier (e.g., serial number) of the ECU that should install this image. An ECU SHOULD verify that each ECU identifier has been defined exactly once in the metadata file. If the director repository wishes to publish per-ECU encrypted images, then the <spanx style="verb">Custom.encryptedTarget</spanx> attribute MAY be used to specify metadata about the encrypted images. An ECU MUST then download the encrypted image, check its metadata, decrypt the image, and check its metadata again. Finally, if an ECU key is an asymmetric public key, the director repository MAY use a <spanx style="emph">symmetric</spanx> private key to reduce the time used to decrypt the image. To do so, the director repository MAY use the <spanx style="emph">asymmetric</spanx> ECU key to encrypt, e.g., a private AES symmetric key, and place the encrypted key in the <spanx style="verb">Custom.encryptedSymmetricKey</spanx> attribute.</t>

</section>
<section anchor="delegations_meta" title="Metadata about Delegations">

<t>Besides directly signing metadata about images, the targets role MAY delegate this responsibility to delegated targets roles. To do so, the targets role uses the OPTIONAL <spanx style="verb">TargetsMetadata.delegations</spanx> attribute. If this attribute is not used, then it means that there are no delegations.</t>

<t>The <spanx style="verb">TargetsDelegations.keys</spanx> attribute lists all of the public keys used by the delegated targets roles in the current targets metadata file. An ECU SHOULD verify that each public key (identified by its <spanx style="verb">Keyid</spanx>) has been defined exactly once in the metadata file.</t>

<t>The <spanx style="verb">TargetsDelegations.delegations</spanx> attribute lists all of the delegations in the current targets metadata file.  All delegations are prioritized: a sequence is used to list delegations in order of appearance, so that the earlier the appearance of a delegation, the higher its priority. Every delegation contains three important attributes.</t>

<t>The <spanx style="verb">PathsToRoles.paths</spanx> attribute describes a sequence of target/image paths that the delegated roles are trusted to provide. A desired target/image needs to match only one of these paths for the delegation to apply. A path MAY be either to a single file, or to a directory to indicate all files and / or subdirectories under that directory. A path to a directory is used to indicate all possible targets sharing that directory as a prefix; e.g. if the directory is “targets/A,” then targets which match that directory include “targets/A/B.img” and “targets/A/B/C.img.”</t>

<t>The <spanx style="verb">PathsToRoles.roles</spanx> attribute describes all of the roles that SHALL sign the same non-custom metadata (i.e., filename, length, and hashes of unencrypted images) about delegated targets/images. Every delegated targets role has (1) a name, (2) a set of public keys, and (3) a threshold of these keys required to verify its metadata file.</t>

<t>Note that a role name SHOULD follow the filename restrictions of the underlying file storage mechanism. For example, it may be “director” or “targets/director.” As discussed in Section 3.7, the role name will determine part of the actual metadata filename of the delegated targets role. If it is “director” or “targets/director,” then its delegated targets metadata file MAY use the filename “director.ext” or “targets/director.ext,” respectively. However, the role name SHALL NOT use the path separator (e.g., “/” or “\”) if it is a character used to separate directories on the underlying file storage mechanism. In other words, all targets metadata files are implicitly assumed to reside in the same directory. It is safe to use this character in key-value databases or stores that do not have a notion of directories (e.g., Amazon S3).</t>

<t>Finally, the <spanx style="verb">PathsToRoles.terminating</spanx> attribute determines whether or not a backtracking search for a target/image should be terminated.</t>

<t>The metadata file for a delegated targets role SHALL have exactly the same format as for the top-level targets role. For example, the metadata file for a supplier role has precisely the same format as the the top-level targets role.</t>

</section>
</section>
<section anchor="snapshot_meta" title="Snapshot Metadata">

<t>The snapshot metadata lists the version numbers of all targets metadata files on the repository. It is signed using the snapshot role keys, and follows the format specified here.
```
SnapshotModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>EXPORTS SnapshotMetadata;</t>

<t>IMPORTS Length,
          Hashes,
          StrictFilename,
          Version FROM CommonModule;</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  SnapshotMetadata ::= SEQUENCE {
    numberOfSnapshotMetadataFiles Length,
    snapshotMetadataFiles         SnapshotMetadataFiles
  }
  SnapshotMetadataFiles ::= SEQUENCE (SIZE(1..128)) OF SnapshotMetadataFile
  SnapshotMetadataFile ::= SEQUENCE {
    filename  StrictFilename,
    version   Version,
    – https://tools.ietf.org/html/rfc6025#section-2.4.2
    …
  }</t>

<t>END
```
The <spanx style="verb">filename</spanx> attribute specifies a metadata file’s relative path from the metadata root of a repository, and SHALL NOT contain a path separator.</t>

<t>An ECU SHOULD verify that each filename has been defined exactly once in the snapshot metadata file.</t>

</section>
<section anchor="timestamp_meta" title="Timestamp Metadata">

</section>
<section anchor="map_file" title="The map file">

</section>
<section anchor="metadata_filename_rules" title="Rules for filenames in repositories and metadata">

<t>There is a difference between the file name in a metadata file or an ECU, and the file name on a repository. This difference exists in order to avoid race conditions, where metadata and images are read from and written to at the same time. For more details, the reader should read the TUF specification <xref target="TUF-spec"/> and PEP 458 <xref target="PEP-458"/>.</t>

<t>Unless stated otherwise, all metadata files SHALL be written as such to a repository. If a metadata file A was specified as FILENAME.EXT in another metadata file B, then it SHALL be written as VERSION.FILENAME.EXT where VERSION is A’s version number <xref target="common_metadata"/>.</t>

<t>For example, if the top-level targets metadata file is referenced as “targets.json” in the snapshot metadata file, it is read and written using the filename “1.targets.json” instead. In a similar example, if the snapshot metadata file is referenced as “snapshot.json” in the timestamp metadata file, it is read and written using the filename “1.snapshot.json” instead. To take a final example using delegations (Section 3.4.2), if the ROLENAME of a delegated targets metadata file is “director,” and it is referred to in the snapshot metadata file using the filename “director.json” and the version number 42, then it is read and written using the filename “42.director.json” instead.</t>

<t>There are two exceptions to this rule. First, if the version number of the timestamp metadata is not known in advance, it MAY also be read from and written to a repository using a filename that is not qualified with a version number (i.e., FILENAME.EXT). As we will see in <xref target="director_repository"/>, this is the case with the timestamp metadata file on the image repository, but not the director repository. Second, the root metadata SHALL also be read from and written to a repository using a filename that is not qualified with a version number (i.e., FILENAME.EXT). This is because, as we will see in <xref target="metadata_verification"/>, the root metadata may be read without knowing its version number in advance.</t>

<t>All target files are written as such to a repository. If a target’s metadata file specifies a target file as FILENAME.EXT then it SHALL be written as HASH.FILENAME.EXT where HASH is one of the n hashes of the targets file <xref target="targets_meta"/>. This means that there SHALL be n different file names that all point to the same target file. Each filename is distinguished only by the value of the digest in its filename.</t>

<t>However, note that although a primary SHALL download a metadata or target file using the filename written to the repository, it SHALL write the file to its own storage using the original filename in the metadata. For example, if a metadata file is referred to as FILENAME.EXT in another metadata file, then a primary SHALL download it using either the filename FILENAME.EXT, VERSION.FILENAME.EXT, or HASH.FILENAME.EXT (depending on which of the aforementioned rules applies), but it SHALL always write it to its own storage as FILENAME.EXT. This implies that the previous set of metadata and target files downloaded from a repository SHALL be kept in a separate directory on an ECU from the latest set of files.</t>

<t>For example, the previous set of metadata and target files MAY be kept in the “previous” directory on an ECU, whereas the latest set of files MAY be kept in the “current” directory.</t>

</section>
<section anchor="vehicle_version_manifest" title="Vehicle version manifest">

<section anchor="version_report" title="ECU version report">
<t>The timestamp metadata specifies metadata (e.g., filename and version number) about the snapshot metadata file. It is signed using the timestamp role keys, and follows the format below.
```
TimestampModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>EXPORTS TimestampMetadata;</t>

<t>IMPORTS Filename,
          Hashes,
          Length,
          Version FROM CommonModule;</t>

<t>TimestampMetadata ::= SEQUENCE {
    filename        Filename,
    version         Version,
    length          Length,
    numberOfHashes  Length,
    hashes          Hashes,
    – https://tools.ietf.org/html/rfc6025#section-2.4.2
    …
  }</t>

<t>END
```</t>

</section>
</section>
<section anchor="the-map-file" title="The map file">

<t>The map file specifies which images should be downloaded from which repositories. In most deployment scenarios for full verification ECUs, this will mean downloading images from both the image and director repositories. It is not signed, and follows the format specified here.
```
MapFileModule DEFINITIONS AUTOMATIC TAGS ::= BEGIN</t>

<t>IMPORTS Length,
          Paths,
          StrictFilename,
          URLs FROM CommonModule;</t>

<t>– https://github.com/theupdateframework/taps/blob/master/tap4.md
  MapFile ::= SEQUENCE {
    – A list of repositories.
    numberOfRepositories  Length,
    repositories          Repositories,
    –A list of mapping of images to repositories.
    numberOfMappings      Length,
    mappings              Mappings
  }</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  Repositories    ::= SEQUENCE (SIZE(2)) OF Repository
  Repository      ::= SEQUENCE {
    – A shorthand name for the repository, which also specifies the name of the
    – directory on the client which contains previous and latest metadata.
    name              RepositoryName,
    – A list of servers where metadata and targets may be downloaded from.
    numberOfServers   Length,
    servers           URLs,
    – https://tools.ietf.org/html/rfc6025#section-2.4.2
    …
  }
  – Adjust length of SEQUENCE OF to your needs.
  RepositoryNames ::= SEQUENCE (SIZE(2)) OF RepositoryName
  RepositoryName  ::= StrictFilename</t>

<t>– Adjust length of SEQUENCE OF to your needs.
  Mappings ::= SEQUENCE (SIZE(1)) OF Mapping
  Mapping  ::= SEQUENCE {
    – The list of targets delegated to the following repositories.
    numberOfPaths         Length,
    paths                 Paths,
    – The repositories which MUST all sign the preceeding targets.
    numberOfRepositories  Length,
    repositories          RepositoryNames,
    – Whether or not this delegation is terminating.
    terminating           BOOLEAN DEFAULT FALSE,
    – https://tools.ietf.org/html/rfc6025#section-2.4.2
    …
  }</t>

<t>END
```
The <spanx style="verb">MapFile.repositories</spanx> attribute specifies a list of available repositories. For each repository, a short-hand name, and a list of servers where metadata and targets may be downloaded from, are specified. The short-hand name also specifies the metadata directory on an ECU containing the previous and current sets of metadata files.</t>

<t>The <spanx style="verb">MapFile.mappings</spanx> attribute specifies which images are mapped to which repositories. An OEM MAY map the same set of images to multiple repositories. Typically, an OEM would map all images to both the image and director repositories. See the deployment considerations document for other configurations, especially with regard to fleet management.</t>

</section>
</section>
<section anchor="server-repository-implementation-requirements" title="Server / repository implementation requirements">

<t>An Uptane implementation SHALL make the following services available to vehicles:</t>

<t><list style="symbols">
  <t>Image repository</t>
  <t>Director repository</t>
  <t>Time server</t>
</list></t>

<section anchor="image-repository" title="Image Repository">

<t>The Image repository exists to allow an OEM and/or its suppliers to upload images and their associated metadata. It makes these images and their metadata available to vehicles. The Image repository is designed to be primarily controlled by human actors, and updated relatively infrequently.</t>

<t>The Image repository SHALL expose an interface permitting the download of metadata and images. This interface SHOULD be public.</t>

<t>The Image repository SHALL require authorization for writing metadata and images.</t>

<t>The Image repository SHALL provide a method for authorized users to upload images and their associated metadata. It SHALL check that a user writing metadata and images is authorized to do so for that specific image by checking the chain of delegations for the image as described in <xref target="delegations_meta"/>.</t>

<t>The Image repository SHALL implement storage which permits authorized users to write an image file using a unique filename, and later read the same file using the same name. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<t>The Image repository MAY require authentication for read access.</t>

</section>
<section anchor="director_repository" title="Director Repository">

<t>The Director repository instructs ECUs as to which images should be installed by producing signed metadata on demand. Unlike the Image repository, it is mostly controlled by automated, online processes. It also consults a private inventory database containing information on vehicles, ECUs, and software revisions.</t>

<t>The Directory repository SHALL expose an interface for primaries to upload vehicle version manifests (<xref target="vehicle_version_manifest"/>) and download metadata. This interface SHOULD be public.
The Director MAY encrypt images for ECUs that require it, either by encrypting on-the-fly or by storing encrypted images in the repository.</t>

<t>The Director repository SHALL implement storage which permits an automated service to write generated metadata files. It MAY use any filesystem, key-value store, or database that fulfills this requirement.</t>

<section anchor="directing-installation-of-images-on-vehicles" title="Directing installation of images on vehicles">

<t>A Director repository MUST conform to the following six-step process for directing the installation of software images on a vehicle.</t>

<t><list style="numbers">
  <t>When the Director receives a vehicle version manifest sent by a primary (as described in <xref target="construct_manifest_primary"/>), it decodes the manifest, and determines the unique vehicle identifier.</t>
  <t>Using the vehicle identifier, the Director queries its inventory database (as described in <xref target="inventory_db"/>) for relevant information about each ECU in the vehicle.</t>
  <t>The Director checks the manifest for accuracy compared to the information in the inventory database. If any of the required checks fail, the Director drops the request. An implementor MAY make whatever additional checks they wish. At a minimum, the following checks are required:
  <list style="symbols">
      <t>Each ECU recorded in the inventory database is also represented in the manifest.</t>
      <t>The signature of the manifest matches the ECU key of the primary that sent it.</t>
      <t>The signature of each secondary’s contribution to the manifest matches the ECU key of that secondary.</t>
    </list></t>
  <t>The Director extracts information about currently installed images from the vehicle version manifest. Using this information, it determines if the vehicle is already up-to-date, and if not, determines a set of images that should be installed. The exact process by which this determination takes place is out of scope of this standard. However, it MUST take into account <spanx style="emph">dependencies</spanx> and <spanx style="emph">conflicts</spanx> between images, and SHOULD consult well-established techniques for dependency resolution.</t>
  <t>The Director MAY encrypt images for ECUs that require it.</t>
  <t>The Director generates new metadata representing the desired set of images to be installed in the vehicle, based on the dependency resolution in step 4. This includes targets (<xref target="targets_meta"/>), snapshot (<xref target="snapshot_meta"/>), and timestamp (<xref target="timestamp_meta"/>) metadata. It then sends this metadata to the primary as described in <xref target="download_meta_primary"/>.</t>
</list></t>

</section>
<section anchor="inventory_db" title="Inventory Database">

<t>The Director SHALL use a private inventory database to store information about ECUs and vehicles. An implementor MAY use any durable database for this purpose.</t>

<t>The inventory database MUST record the following pieces of information:</t>

<t><list style="symbols">
  <t>Per vehicle:
  <list style="symbols">
      <t>A unique identifier (such as a VIN)</t>
    </list></t>
  <t>Per ECU:
  <list style="symbols">
      <t>A unique identifier (such as a serial number)</t>
      <t>The vehicle identifier the ECU is associated with</t>
      <t>A public key</t>
      <t>The format of the public key</t>
      <t>Whether the ECU is a primary or a secondary</t>
    </list></t>
</list></t>

<t>The inventory database MAY record other information about ECUs and vehicles.</t>

</section>
</section>
<section anchor="time_server" title="Time Server">

<t>The Time Server exists to inform vehicles about the current time in cryptographically secure way, since many ECUs in a vehicle will not have a reliable source of time. It receives lists of tokens from vehicles, and returns back a signed sequence that includes the token and the current time.</t>

<t>The Time Server SHALL receive a sequence of tokens from a vehicle representing all of its ECUs. In response, it SHALL sign each token together with the current time.</t>

<t>The Time Server SHALL expose a public interface allowing primaries to communicate with it. This communication MAY occur over FTP, FTPS, SFTP, HTTP, or HTTPS.</t>

</section>
</section>
<section anchor="in-vehicle-implementation-requirements" title="In-vehicle implementation requirements">

<t>An Uptane-compliant ECU SHALL be able to download and verify the time, metadata, and image binaries before installing a new image.</t>

<t>Each ECU in a vehicle receiving over-the-air updates is either a primary or a secondary ECU. A primary ECU collects and delivers to the Director vehicle manifests (<xref target="vehicle_version_manifest"/>) containing information about which images have been installed on ECUs in the vehicle. It also downloads and verifies the latest time, metadata, and images for itself and for its secondaries. A secondary ECU downloads and verifies the latest time, metadata, and images for itself from its associated primary ECU. It also sends signed information about its installed images to its associated primary.</t>

<t>All ECUs MUST verify image metadata as specified in <xref target="metadata_verification"/> before installing an image or making it available to other ECUs. A primary ECU MUST perform full verification (<xref target="full_verification"/>). A secondary ECU SHOULD perform full verification if possible, and MUST perform full verification if it is safety-critical. If it is not safety-critical, it MAY perform partial verification (<xref target="partial_verification"/>) instead.</t>

<section anchor="build-time-prerequisite-requirements-for-ecus" title="Build-time prerequisite requirements for ECUs">

<t>For an ECU to be capable of receiving Uptane-secured updates, it MUST have the following data provisioned at the time it is manufactured or installed in the vehicle:</t>

<t><list style="numbers">
  <t>The latest copy of required Uptane metadata at the time of manufacture or install.
  <list style="symbols">
      <t>Partial verification ECUs MUST have the root and targets metadata from the director repository.</t>
      <t>Full verification ECUs MUST have a complete set of metadata from both repositories (root, targets, snapshot, and timestamp), as well as the repository map file <xref target="TAP-4"/>.</t>
    </list></t>
  <t>The public key(s) of the time server.</t>
  <t>An attestation of time downloaded from the time server.</t>
  <t>An <spanx style="strong">ECU key</spanx>. This is a private key, unique to the ECU, used to sign ECU version manifests and decrypt images. An ECU key MAY be either a symmetric key or an asymmetric key. If it is an asymmetric key, there MAY be separate keys for encryption and signing. For the purposes of this standard, the set of private keys that an ECU uses is referred to as the ECU key (singular), even if it is actually multiple keys used for different purposes.</t>
</list></t>

</section>
<section anchor="downloading-and-distributing-updates-on-a-primary-ecu" title="Downloading and distributing updates on a primary ECU">

<t>A primary downloads, verifies, and distributes the latest time, metadata and images. To do so, it SHALL perform the following seven steps:</t>

<t><list style="numbers">
  <t>Construct and send vehicle version manifest (<xref target="construct_manifest_primary"/>)</t>
  <t>Download and check current time (<xref target="check_time_primary"/>)</t>
  <t>Download and verify metadata (<xref target="download_meta_primary"/>)</t>
  <t>Download and verify images (<xref target="download_images_primary"/>)</t>
  <t>Send latest time to secondaries (<xref target="send_time_primary"/>)</t>
  <t>Send metadata to secondaries (<xref target="send_metadata_primary"/>)</t>
  <t>Send images to secondaries (<xref target="send_images_primary"/>)</t>
</list></t>

<section anchor="construct_manifest_primary" title="Construct and send vehicle version manifest">

<t>The primary SHALL build a <spanx style="emph">vehicle version manifest</spanx> as described in <xref target="vehicle_version_manifest"/>.</t>

<t>Once it has the complete manifest built, it MAY send the manifest to the director repository. However, it is not strictly required that the primary send the manifest until step three.</t>

<t>Secondaries MAY send their version report at any time, so that it is stored on the primary already when it wishes to check for updates. Alternatively, the primary MAY request a version report from each secondary at the time of the update check.</t>

</section>
<section anchor="check_time_primary" title="Download and check current time">

<t>The primary SHALL download the current time from the time server, for distribution to its secondaries.</t>

<t>The version report from each secondary ECU (as described in <xref target="version_report"/>) contains a nonce, plus a signed ECU version report. The primary SHALL gather each of these nonces from the secondary ECUs, then send them to the time server to fetch the current time. The time server responds as described in <xref target="time_server"/>, providing a cryptographic attestation of the last known time. The primary SHALL verify that the signatures are valid, and that the time the server attests is greater than the previous attested time.</t>

</section>
<section anchor="download_meta_primary" title="Download and verify metadata">

<t>The primary SHALL download metadata for all targets and perform a full verification on it as specified in <xref target="full_verification"/>.</t>

</section>
<section anchor="download_images_primary" title="Download and verify images">

<t>The primary SHALL download and verify images for itself and for all of its associated secondaries. Images SHALL be verified by checking that the hash of the image file matches the hash specified in the director’s targets metadata for that image.</t>

<t>There may be several different filenames that all refer to the same image binary, as described in <xref target="targets_meta"/>. The primary SHALL associate each image binary with each of its possible filenames.</t>

</section>
<section anchor="send_time_primary" title="Send latest time to secondaries">

<t>The primary SHALL send the time server’s latest attested time to each ECU. The secondary SHALL verify the time message, then overwrite its current time with the received time.</t>

</section>
<section anchor="send_metadata_primary" title="Send metadata to secondaries">

<t>The primary SHALL send the latest metadata it has downloaded to all of its associated secondaries.</t>

<t>Full verification secondaries SHALL keep a complete copy of all metadata. A partial verification secondary MAY keep <spanx style="emph">only</spanx> the targets metadata file from the director repository.</t>

</section>
<section anchor="send_images_primary" title="Send images to secondaries">

<t>The primary SHALL send the latest image to each of its associated secondaries that have storage to receive it.</t>

<t>For secondaries without storage, the primary SHOULD wait for a request from the secondary to stream the new image file to it. The secondary will send the request once it has verified the metadata sent in the previous step.</t>

</section>
</section>
<section anchor="installing-images-on-ecus" title="Installing images on ECUs">

<t>Before installing a new image, an ECU SHALL perform the following five steps:</t>

<t><list style="numbers">
  <t>Verify latest attested time (<xref target="verify_time"/>)</t>
  <t>Verify metadata (<xref target="verify_metadata"/>)</t>
  <t>Download latest image (<xref target="download_image"/>)</t>
  <t>Verify image (<xref target="verify_image"/>)</t>
  <t>Create and send version report (<xref target="create_version_report"/>)</t>
</list></t>

<section anchor="verify_time" title="Verify latest attested time">

<t>The ECU SHALL verify the latest downloaded time. To do so, it must:</t>

<t><list style="numbers">
  <t>Verify that the signatures on the downloaded time are valid,</t>
  <t>Verify that the list of nonces/tokens in the downloaded time includes the token that the ECU sent in its previous version report</t>
  <t>Verify that the time downloaded is greater than the previous time</t>
</list></t>

<t>If all three steps complete without error, the ECU SHALL overwrite its current attested time with the time it has just downloaded and generate a new nonce/token for the next request to the time server.</t>

<t>If any check fails, the ECU SHALL NOT overwrite its current attested time, and SHALL jump to the fifth step (<xref target="create_version_report"/>). The ECU MUST reuse its previous token for the next request to the time server.</t>

</section>
<section anchor="verify_metadata" title="Verify metadata">

<t>The ECU SHALL verify the latest downloaded metadata (<xref target="metadata_verification"/>) using either full or partial verification. If the metadata verification fails for any reason, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="download_image" title="Download latest image">

<t>If the ECU does not have secondary storage, it SHALL download the latest image from the primary. (If the ECU has secondary storage, it will already have the latest image in its secondary storage as specified in <xref target="send_images_primary"/>, and should skip to the next step.) The ECU MAY first create a backup of its previous working image and store it elsewhere (e.g., the primary).</t>

<t>The filename used to identify the latest known image (i.e., the file to request from the primary) SHALL be determined as follows:</t>

<t><list style="numbers">
  <t>Load the targets metadata file from the director repository.</t>
  <t>Find the targets metadata associated with this ECU identifier.</t>
  <t>Construct the image filename using the rule in <xref target="metadata_filename_rules"/>.</t>
</list></t>

<t>When the primary responds to the download request, the ECU SHALL overwrite its current image with the downloaded image from the primary.</t>

<t>If any part of this step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>).</t>

</section>
<section anchor="verify_image" title="Verify image">

<t>The ECU SHALL verify that the latest image matches the latest metadata as follows:</t>

<t><list style="numbers">
  <t>Load the latest targets metadata file from the director.</t>
  <t>Find the target metadata associated with this ECU identifier.</t>
  <t>Check that the hardware identifier in the metadata matches the ECUs hardware identifier.</t>
  <t>Check that the release counter of the image in the previous metadata, if it exists, is less than or equal to the release counter in the latest metadata.</t>
  <t>If the image is encrypted, decrypt the image with a decryption key to be chosen as follows:
  <list style="symbols">
      <t>If the ECU key is a symmetric key, the ECU SHALL use the ECU key for image decryption.</t>
      <t>If the ECU key is asymmetric, the ECU SHALL check the target metadata for an encrypted symmetric key. If such a key is found, the ECU SHALL decrypt the symmetric key using its ECU key, and use the decrypted symmetric key for image decryption.</t>
      <t>If the ECU key is asymmetric and there is no symmetric key in the target metadata, the ECU SHALL use its ECU key for image decryption.</t>
    </list></t>
  <t>Check that the hash of the image matches the hash in the metadata.</t>
</list></t>

<t>If the ECU has secondary storage, the checks SHOULD be performed on the image in secondary storage, before it is installed.</t>

<t>If any step fails, the ECU SHALL jump to the fifth step (<xref target="create_version_report"/>). If the ECU does not have secondary storage, a step fails, and the ECU created a backup of its previous working image, the ECU SHOULD now install the backup image.</t>

</section>
<section anchor="create_version_report" title="Create and send version report">

<t>The ECU SHALL create a version report as described in <xref target="version_report"/>, and send it to the primary (or simply save it to disk, if the ECU is a primary). The primary SHOULD write the version reports it receives to disk and associate them with the secondaries that sent them.</t>

</section>
</section>
<section anchor="metadata_verification" title="Metadata verification">

<t>A primary ECU MUST perform full verification of metadata. A secondary ECU SHOULD perform full verification of metadata, but MAY perform partial verification instead.</t>

<t>If a step in the following workflows does not succeed (e.g., the update is aborted because a new metadata file was not signed), an ECU SHOULD still be able to update again in the future. Errors raised during the update process SHOULD NOT leave ECUs in an unrecoverable state.</t>

<section anchor="partial_verification" title="Partial verification">

<t>In order to perform partial verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load the latest attested time from the time server.</t>
  <t>Load the latest top-level targets metadata file from the director repository.</t>
  <t>Check that the metadata file has been signed by a threshold of keys specified in the previous root metadata file. If not, return an error code indicating an arbitrary software attack.</t>
  <t>Check that the version number in the previous targets metadata file, if any, is less than or equal to the version number in this targets metadata file. If not, return an error code indicating a rollback attack.</t>
  <t>Check that the latest attested time is lower than the expiration timestamp in this metadata file. If not, return an error code indicating a freeze attack.</t>
  <t>Check that there are no delegations. If there are, return an error code.</t>
  <t>Check that each ECU identifier appears only once. If not, return an error code.</t>
  <t>Return an indicator of success.</t>
</list></t>

</section>
<section anchor="full_verification" title="Full verification">

<t>Full verification of metadata means that the ECU checks that the targets metadata about images from the director repository matches the targets metadata about the same images from the image repository. This provides resilience to a key compromise in the system.</t>

<t>Full verification MAY be performed either by primary or secondary ECUs. The procedure is the same, except that secondary ECUs receive their metadata from the primary instead of downloading it directly. In the following instructions, whenever an ECU is directed to download metadata, it applies only to primary ECUs.</t>

<t>A primary ECU SHALL download metadata and images following the rules specified in <xref target="TAP-5"/>, and the metadata file renaming rules specified in <xref target="metadata_filename_rules"/>.</t>

<t>In order to perform full verification, an ECU SHALL perform the following steps:</t>

<t><list style="numbers">
  <t>Load the map file <xref target="TAP-4"/>. If necessary, use the information therein to determine where to download metadata from.</t>
  <t>Load the latest attested time from the time server.</t>
  <t>Download and check the root metadata file from the director repository:
  <list style="numbers">
      <t>Load the previous root metadata file.</t>
      <t>Update to the latest root metadata file.</t>
      <t>Let N denote the version number of the latest root metadata file (which at first could be the same as the previous root metadata file).</t>
      <t>Try downloading a new version N+1 of the root metadata file, up to some X number of bytes. The value for X is set by the implementor. For example, X may be tens of kilobytes. The filename used to download the root metadata file is of the fixed form VERSION_NUMBER.FILENAME.EXT (e.g., 42.root.json). If this file is not available, then go to step 3.5.</t>
      <t>Version N+1 of the root metadata file MUST have been signed by: (1) a threshold of keys specified in the latest root metadata file (version N), and (2) a threshold of keys specified in the new root metadata file being validated (version N+1). If version N+1 is not signed as required, discard it, abort the update cycle, and report the signature failure. On the next update cycle, begin at step 0 and version N of the root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>The version number of the latest root metadata file (version N) must be less than or equal to the version number of the new root metadata file (version N+1). Effectively, this means checking that the version number signed in the new root metadata file is indeed N+1. If the version of the new root metadata file is less than the latest metadata file, discard it, abort the update cycle, and report the rollback attack. On the next update cycle, begin at step 0 and version N of the root metadata file. (Checks for a rollback attack.)</t>
      <t>Set the latest root metadata file to the new root metadata file.</t>
      <t>Repeat steps 1 to 6.</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in the latest root metadata file. (Checks for a freeze attack.)</t>
      <t>If the the timestamp and / or snapshot keys have been rotated, delete the previous timestamp and snapshot metadata files. (Checks for recovery from fast-forward attacks <xref target="MERCURY"/>.)</t>
    </list></t>
  <t>Download and check the timestamp metadata file from the director repository:
  <list style="numbers">
      <t>Download up to Y number of bytes. The value for Y is set by the implementor. For example, Y may be tens of kilobytes. The filename used to download the timestamp metadata file is of the fixed form FILENAME.EXT (e.g., timestamp.json).</t>
      <t>Check that it has been signed by the threshold of keys specified in the latest root metadata file. If the new timestamp metadata file is not properly signed, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
      <t>Check that the version number of the previous timestamp metadata file, if any, is less than or equal to the version number of this timestamp metadata file. If the new timestamp metadata file is older than the trusted timestamp metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in this timestamp metadata file. If the new timestamp metadata file has expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
    </list></t>
  <t>Download and check the snapshot metadata file from the director repository:
  <list style="numbers">
      <t>Download up to the number of bytes specified in the timestamp metadata file. If consistent snapshots are not used <xref target="metadata_filename_rules"/>, then the filename used to download the snapshot metadata file is of the fixed form FILENAME.EXT (e.g., snapshot.json). Otherwise, the filename is of the form VERSION_NUMBER.FILENAME.EXT (e.g., 42.snapshot.json), where VERSION_NUMBER is the version number of the snapshot metadata file listed in the timestamp metadata file. In either case, the ECU MUST write the file to non-volatile storage as FILENAME.EXT.</t>
      <t>The hashes and version number of the new snapshot metadata file MUST match the hashes and version number listed in timestamp metadata. If hashes and version do not match, discard the new snapshot metadata, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
      <t>Check that it has been signed by the threshold of keys specified in the latest root metadata file. If the new snapshot metadata file is not signed as required, discard it, abort the update cycle, and report the signature failure. (Checks for an arbitrary software attack.)</t>
      <t>Check that the version number of the previous snapshot metadata file, if any, is less than or equal to the version number of this snapshot metadata file. If this snapshot metadata file is older than the previous snapshot metadata file, discard it, abort the update cycle, and report the potential rollback attack. (Checks for a rollback attack.)</t>
      <t>Check that the version number the previous snapshot metadata file lists for each targets metadata file is less than or equal to the its version number in this snapshot metadata file. If this condition is not met, discard the new snaphot metadadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
      <t>Check that each targets metadata filename listed in the previous snapshot metadata file is also listed in this snapshot metadata file. If this condition is not met, discard the new snaphot metadadata file, abort the update cycle, and report the failure. (Checks for a rollback attack.)</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in this snapshot metadata file. If the new snapshot metadata file is expired, discard it, abort the update cycle, and report the potential freeze attack. (Checks for a freeze attack.)</t>
    </list></t>
  <t>Download and check the targets metadata file from the director repository:
  <list style="numbers">
      <t>Download up to either the number of bytes specified in the snapshot metadata file, or some Z number of bytes. The value for Z is set by the implementor. For example, Z may be tens of kilobytes. If consistent snapshots are not used <xref target="metadata_filename_rules"/>, then the filename used to download the targets metadata file is of the fixed form FILENAME.EXT (e.g., targets.json). Otherwise, the filename is of the form VERSION_NUMBER.FILENAME.EXT (e.g., 42.targets.json), where VERSION_NUMBER is the version number of the targets metadata file listed in the snapshot metadata file. In either case, the ECU MUST write the file to non-volatile storage as FILENAME.EXT.</t>
      <t>The hashes (if any), and version number of the new targets metadata file MUST match the latest snapshot metadata. If the new targets metadata file does not match, discard it, abort the update cycle, and report the failure. (Checks for a mix-and-match attack.)</t>
      <t>Check that it has been signed by the threshold of keys specified in the latest root metadata file. (Checks for an arbitrary software attack.)</t>
      <t>Check that the version number of the previous targets metadata file, if any, is less than or equal to the version number of this targets metadata file. (Checks for a rollback attack.)</t>
      <t>Check that the latest attested time is lower than the expiration timestamp in this targets metadata file. (Checks for a freeze attack.)</t>
      <t>Check that there are no delegations. (Targets metadata from the director MUST NOT contain delegations.)</t>
      <t>Check that no ECU identifier is represented more than once.</t>
    </list></t>
  <t>Download and check the root metadata file from the image repository as in Step 3.</t>
  <t>Download and check the timestamp metadata file from the image repository as in Step 4.</t>
  <t>Download and check the snapshot metadata file from the image repository as in Step 5.</t>
  <t>Download and check the top-level targets metadata file from the image repository as in Step 6 (except for Steps 6.6-6.7).</t>
  <t>For each image listed in the targets metadata file from the director repository, locate a targets metadata file that contains an image with exactly the same file name. For each delegated targets metadata file that is found to contain metadata for the image currently being processed, perform all of the checks in step 10. Use the following process to locate image metadata:
  <list style="numbers">
      <t>If the top-level targets metadata file contains signed metadata about the image, return the metadata to be checked and skip to step 11.3.</t>
      <t>Recursively search the list of delegations, in order of appearance:
      <list style="numbers">
          <t>If it is a multi-role delegation <xref target="TAP-3"/>, recursively visit each role, and check that each has signed exactly the same non-custom metadata (i.e., length and hashes) about the image. If it is all the same, return the metadata to be checked and skip to step 11.3.</t>
          <t>If it is a terminating delegation and it contains signed metadata about the image, return the metadata to be checked and skip to step 11.3. If metadata about an image is not found in a terminating delegation, return an error code indicating that the image is missing.</t>
          <t>Otherwise, continue processing the next delegation, if any. As soon as a delegation is found that contains signed metadata about the image, return the metadata to be checked and skip to step 11.3.</t>
          <t>If no signed metadata about the image can be found anywhere in the delegation graph, return an error code indicating that the image is missing.</t>
        </list></t>
      <t>Check that the targets metadata from the image repository matches the targets metadata from the director repository:
      <list style="numbers">
          <t>Check that the non-custom metadata (i.e., length and hashes) of the unencrypted image are the same in both sets of metadata.</t>
          <t>Check that the custom metadata (e.g., hardware identifier and release counter) are the same in both sets of metadata.</t>
          <t>Check that the release counter in the previous targets metadata file is less than or equal to the release counter in this targets metadata file.</t>
        </list></t>
    </list></t>
  <t>Verify the desired image against its targets metadata.</t>
  <t>If there is no targets metadata about this image, abort the update cycle and report that there is no such image.</t>
  <t>Otherwise, download the image (up to the number of bytes specified in the targets metadata), and verify that its hashes match the targets metadata. (We download up to this number of bytes, because in some cases, the exact number is unknown. This may happen, for example, if an external program is used to compute the root hash of a tree of targets files, and this program does not provide the total size of all of these files.) If consistent snapshots are not used <xref target="metadata_filename_rules"/>, then the filename used to download the image file is of the fixed form FILENAME.EXT (e.g., foobar.tar.gz). Otherwise, the filename is of the form HASH.FILENAME.EXT (e.g., c14aeb4ac9f4a8fc0d83d12482b9197452f6adf3eb710e3b1e2b79e8d14cb681.foobar.tar.gz), where HASH is one of the hashes of the targets file listed in the targets metadata file found earlier in step 4. In either case, the client MUST write the file to non-volatile storage as FILENAME.EXT.</t>
</list></t>

<t>If any step fails, the ECU MUST return an error code indicating the failure. If a check for a specific type of security attack fails (e.g. rollback, freeze, arbitrary software, etc.), the ECU SHOULD return an error code that indicates the type of attack.</t>

<t>If the ECU performing the verification is the primary ECU, it SHOULD also ensure that the ECU identifiers present in the targets metadata from the director repository are a subset of the actual ECU identifiers of ECUs in the vehicle.</t>

</section>
</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC2616" target='https://www.rfc-editor.org/info/rfc2616'>
<front>
<title>Hypertext Transfer Protocol -- HTTP/1.1</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='J.' surname='Gettys' fullname='J. Gettys'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<author initials='H.' surname='Frystyk' fullname='H. Frystyk'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<author initials='P.' surname='Leach' fullname='P. Leach'><organization /></author>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<date year='1999' month='June' />
<abstract><t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as &quot;HTTP/1.1&quot;, and is an update to RFC 2068.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2616'/>
<seriesInfo name='DOI' value='10.17487/RFC2616'/>
</reference>



<reference  anchor="RFC3280" target='https://www.rfc-editor.org/info/rfc3280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='D.' surname='Solo' fullname='D. Solo'><organization /></author>
<date year='2002' month='April' />
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 Certificate Revocation List (CRL) for use in the Internet.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3280'/>
<seriesInfo name='DOI' value='10.17487/RFC3280'/>
</reference>



<reference  anchor="RFC3447" target='https://www.rfc-editor.org/info/rfc3447'>
<front>
<title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
<author initials='J.' surname='Jonsson' fullname='J. Jonsson'><organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='2003' month='February' />
<abstract><t>This memo represents a republication of PKCS #1 v2.1 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document is taken directly from the PKCS #1 v2.1 document, with certain corrections made during the publication process.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='3447'/>
<seriesInfo name='DOI' value='10.17487/RFC3447'/>
</reference>



<reference  anchor="RFC3647" target='https://www.rfc-editor.org/info/rfc3647'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>
<author initials='S.' surname='Chokhani' fullname='S. Chokhani'><organization /></author>
<author initials='W.' surname='Ford' fullname='W. Ford'><organization /></author>
<author initials='R.' surname='Sabett' fullname='R. Sabett'><organization /></author>
<author initials='C.' surname='Merrill' fullname='C. Merrill'><organization /></author>
<author initials='S.' surname='Wu' fullname='S. Wu'><organization /></author>
<date year='2003' month='November' />
<abstract><t>This document presents a framework to assist the writers of certificate policies or certification practice statements for participants within public key infrastructures, such as certification authorities, policy authorities, and communities of interest that wish to rely on certificates.  In particular, the framework provides a comprehensive list of topics that potentially (at the writer's discretion) need to be covered in a certificate policy or a certification practice statement.  This document supersedes RFC 2527.</t></abstract>
</front>
<seriesInfo name='RFC' value='3647'/>
<seriesInfo name='DOI' value='10.17487/RFC3647'/>
</reference>



<reference  anchor="RFC4634" target='https://www.rfc-editor.org/info/rfc4634'>
<front>
<title>US Secure Hash Algorithms (SHA and HMAC-SHA)</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2006' month='July' />
<abstract><t>The United States of America has adopted a suite of Secure Hash Algorithms (SHAs), including four beyond SHA-1, as part of a Federal Information Processing Standard (FIPS), specifically SHA-224 (RFC 3874), SHA-256, SHA-384, and SHA-512.  The purpose of this document is to make source code performing these hash functions conveniently available to the Internet community.  The sample code supports input strings of arbitrary bit length.  SHA-1's sample code from RFC 3174 has also been updated to handle input strings of arbitrary bit length.  Most of the text herein was adapted by the authors from FIPS 180-2.</t><t>Code to perform SHA-based HMACs, with arbitrary bit length text, is also included.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='4634'/>
<seriesInfo name='DOI' value='10.17487/RFC4634'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>



<reference  anchor="RFC5756" target='https://www.rfc-editor.org/info/rfc5756'>
<front>
<title>Updates for RSAES-OAEP and RSASSA-PSS Algorithm Parameters</title>
<author initials='S.' surname='Turner' fullname='S. Turner'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='K.' surname='Yiu' fullname='K. Yiu'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<author initials='T.' surname='Polk' fullname='T. Polk'><organization /></author>
<date year='2010' month='January' />
<abstract><t>This document updates RFC 4055.  It updates the conventions for using the RSA Encryption Scheme - Optimal Asymmetric Encryption Padding (RSAES-OAEP) key transport algorithm in the Internet X.509 Public Key Infrastructure (PKI).  Specifically, it updates the conventions for algorithm parameters in an X.509 certificate's subjectPublicKeyInfo field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5756'/>
<seriesInfo name='DOI' value='10.17487/RFC5756'/>
</reference>



<reference  anchor="RFC7159" target='https://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>


<reference anchor="TAP-3" target="https://github.com/theupdateframework/taps/commit/d0818e580c322815a473520f2e8cc5f5eb8df499">
  <front>
    <title>The Update Framework TAP 3 - Multi-role delegations</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="18"/>
  </front>
</reference>
<reference anchor="TAP-4" target="https://github.com/theupdateframework/taps/commit/2cb67d913ec19424d1e354b38f862886fbfd4105">
  <front>
    <title>The Update Framework TAP 4 - Multiple repository consensus on entrusted targets</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="December" day="15"/>
  </front>
</reference>
<reference anchor="TAP-5" target="https://github.com/theupdateframework/taps/blob/01726d203c9b9c029d26f6612069ce3180500d9a/tap5.md#downloading-metadata-and-target-files">
  <front>
    <title>The Update Framework TAP 5 - Setting URLs for roles in the root metadata file</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="E." surname="Cordell">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Moshenko">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2018" month="January" day="22"/>
  </front>
</reference>
<reference anchor="TUF-spec" target="https://github.com/theupdateframework/specification/blob/2b4e18472fe25d5b57f36f6fa50104967c8faeaa/tuf-spec.md">
  <front>
    <title>The Update Framework Specification</title>
    <author initials="J." surname="Samuel">
      <organization></organization>
    </author>
    <author initials="N." surname="Mathewson">
      <organization></organization>
    </author>
    <author initials="G." surname="Condra">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="S." surname="Awwad">
      <organization></organization>
    </author>
    <author initials="S." surname="Tobias">
      <organization></organization>
    </author>
    <author initials="J." surname="Wright">
      <organization></organization>
    </author>
    <author initials="H." surname="Mehnert">
      <organization></organization>
    </author>
    <author initials="E." surname="Tryzelaar">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <author initials="R." surname="Dingledine">
      <organization></organization>
    </author>
    <date year="2018" month="September" day="19"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC1321" target='https://www.rfc-editor.org/info/rfc1321'>
<front>
<title>The MD5 Message-Digest Algorithm</title>
<author initials='R.' surname='Rivest' fullname='R. Rivest'><organization /></author>
<date year='1992' month='April' />
<abstract><t>This document describes the MD5 message-digest algorithm. The algorithm takes as input a message of arbitrary length and produces as output a 128-bit &quot;fingerprint&quot; or &quot;message digest&quot; of the input.  This memo provides information for the Internet community.  It does not specify an Internet standard.</t></abstract>
</front>
<seriesInfo name='RFC' value='1321'/>
<seriesInfo name='DOI' value='10.17487/RFC1321'/>
</reference>


<reference anchor="ED25519" >
  <front>
    <title>"High-Speed High-Security Signatures", Journal of Cryptographic Engineering, Vol. 2</title>
    <author initials="D.J." surname="Bernstein">
      <organization></organization>
    </author>
    <author initials="N." surname="Duif">
      <organization></organization>
    </author>
    <author initials="T." surname="Lange">
      <organization></organization>
    </author>
    <author initials="P." surname="Schwabe">
      <organization></organization>
    </author>
    <author initials="B-Y." surname="Yang">
      <organization></organization>
    </author>
    <date year="2011" month="September" day="26"/>
  </front>
</reference>
<reference anchor="MERCURY" target="https://www.usenix.org/system/files/conference/atc17/atc17-kuppusamy.pdf">
  <front>
    <title>Mercury: Bandwidth-Effective Prevention of Rollback Attacks Against Community Repositories</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2017" month="July" day="12"/>
  </front>
  <seriesInfo name="ISBN" value="978-1-931971-38-6"/>
</reference>
<reference anchor="PEP-458" target="https://www.python.org/dev/peps/pep-0458/">
  <front>
    <title>PEP 458 -- Surviving a Compromise of PyPI</title>
    <author initials="T.K." surname="Kuppusamy">
      <organization></organization>
    </author>
    <author initials="V." surname="Diaz">
      <organization></organization>
    </author>
    <author initials="D." surname="Stufft">
      <organization></organization>
    </author>
    <author initials="J." surname="Cappos">
      <organization></organization>
    </author>
    <date year="2013" month="September" day="27"/>
  </front>
</reference>
<reference anchor="USATODAY" target="https://www.usatoday.com/story/tech/columnist/2016/06/28/your-average-car-lot-more-code-driven-than-you-think/86437052/">
  <front>
    <title>Your average car is a lot more code-driven than you think</title>
    <author initials="B." surname="O'Donnell">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="28"/>
  </front>
</reference>
<reference anchor="CR-OTA" target="https://www.consumerreports.org/automotive-technology/automakers-embrace-over-the-air-updates-can-we-trust-digital-car-repair/">
  <front>
    <title>Automakers Embrace Over-the-Air Updates, but Can We Trust Digital Car Repair?</title>
    <author initials="K." surname="Barry">
      <organization></organization>
    </author>
    <date year="2018" month="April" day="20"/>
  </front>
</reference>
<reference anchor="IN-TOTO" target="https://in-toto.github.io/">
  <front>
    <title>in-toto: A framework to secure the integrity of software supply chains</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018" month="October" day="29"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
PpTas/geV4ptzAO/tpVfX/l/R/O+UJM3AQA=

-->

</rfc>

